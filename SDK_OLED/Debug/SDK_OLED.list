
SDK_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cd4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002844  08001e5c  08001e5c  00011e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080046a0  080046a0  000146a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080046a8  080046a8  000146a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080046ac  080046ac  000146ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000024  20000000  080046b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
  8 .bss          000004bc  20000024  20000024  00020024  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200004e0  200004e0  00020024  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000b4fc  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001ca3  00000000  00000000  0002b550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000008b0  00000000  00000000  0002d1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002161d  00000000  00000000  0002daa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000fcd0  00000000  00000000  0004f0c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000beb8d  00000000  00000000  0005ed95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0011d922  2**0
                  CONTENTS, READONLY
 18 .debug_ranges 00000840  00000000  00000000  0011d978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00001728  00000000  00000000  0011e1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00006a76  00000000  00000000  0011f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001e44 	.word	0x08001e44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08001e44 	.word	0x08001e44

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 80004cc:	b500      	push	{lr}
 80004ce:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d0:	2200      	movs	r2, #0
 80004d2:	9203      	str	r2, [sp, #12]
 80004d4:	9204      	str	r2, [sp, #16]
 80004d6:	9205      	str	r2, [sp, #20]
 80004d8:	9206      	str	r2, [sp, #24]
 80004da:	9207      	str	r2, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004dc:	9200      	str	r2, [sp, #0]
 80004de:	4b15      	ldr	r3, [pc, #84]	; (8000534 <MX_GPIO_Init+0x68>)
 80004e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80004e2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80004e6:	6319      	str	r1, [r3, #48]	; 0x30
 80004e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80004ea:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80004ee:	9100      	str	r1, [sp, #0]
 80004f0:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	9201      	str	r2, [sp, #4]
 80004f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80004f6:	f041 0101 	orr.w	r1, r1, #1
 80004fa:	6319      	str	r1, [r3, #48]	; 0x30
 80004fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80004fe:	f001 0101 	and.w	r1, r1, #1
 8000502:	9101      	str	r1, [sp, #4]
 8000504:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000506:	9202      	str	r2, [sp, #8]
 8000508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800050a:	f042 0202 	orr.w	r2, r2, #2
 800050e:	631a      	str	r2, [r3, #48]	; 0x30
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0302 	and.w	r3, r3, #2
 8000516:	9302      	str	r3, [sp, #8]
 8000518:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800051a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800051e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000520:	2302      	movs	r3, #2
 8000522:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	a903      	add	r1, sp, #12
 8000526:	4804      	ldr	r0, [pc, #16]	; (8000538 <MX_GPIO_Init+0x6c>)
 8000528:	f000 fbaa 	bl	8000c80 <HAL_GPIO_Init>

}
 800052c:	b009      	add	sp, #36	; 0x24
 800052e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000532:	bf00      	nop
 8000534:	40023800 	.word	0x40023800
 8000538:	40020000 	.word	0x40020000

0800053c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800053c:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800053e:	480b      	ldr	r0, [pc, #44]	; (800056c <MX_I2C1_Init+0x30>)
 8000540:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <MX_I2C1_Init+0x34>)
 8000542:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <MX_I2C1_Init+0x38>)
 8000546:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000548:	2300      	movs	r3, #0
 800054a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800054c:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800054e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000552:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000554:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000556:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000558:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800055a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800055c:	f000 fdcc 	bl	80010f8 <HAL_I2C_Init>
 8000560:	b900      	cbnz	r0, 8000564 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
  }

}
 8000562:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000564:	f000 f8c8 	bl	80006f8 <Error_Handler>
}
 8000568:	e7fb      	b.n	8000562 <MX_I2C1_Init+0x26>
 800056a:	bf00      	nop
 800056c:	20000040 	.word	0x20000040
 8000570:	40005400 	.word	0x40005400
 8000574:	00061a80 	.word	0x00061a80

08000578 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	2300      	movs	r3, #0
 800057e:	9303      	str	r3, [sp, #12]
 8000580:	9304      	str	r3, [sp, #16]
 8000582:	9305      	str	r3, [sp, #20]
 8000584:	9306      	str	r3, [sp, #24]
 8000586:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8000588:	6802      	ldr	r2, [r0, #0]
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <HAL_I2C_MspInit+0x68>)
 800058c:	429a      	cmp	r2, r3
 800058e:	d001      	beq.n	8000594 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000590:	b009      	add	sp, #36	; 0x24
 8000592:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000594:	2500      	movs	r5, #0
 8000596:	9501      	str	r5, [sp, #4]
 8000598:	4c12      	ldr	r4, [pc, #72]	; (80005e4 <HAL_I2C_MspInit+0x6c>)
 800059a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800059c:	f043 0302 	orr.w	r3, r3, #2
 80005a0:	6323      	str	r3, [r4, #48]	; 0x30
 80005a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80005a4:	f003 0302 	and.w	r3, r3, #2
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005b0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005b2:	2312      	movs	r3, #18
 80005b4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ba:	2303      	movs	r3, #3
 80005bc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005be:	2304      	movs	r3, #4
 80005c0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c2:	a903      	add	r1, sp, #12
 80005c4:	4808      	ldr	r0, [pc, #32]	; (80005e8 <HAL_I2C_MspInit+0x70>)
 80005c6:	f000 fb5b 	bl	8000c80 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005ca:	9502      	str	r5, [sp, #8]
 80005cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005d2:	6423      	str	r3, [r4, #64]	; 0x40
 80005d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005da:	9302      	str	r3, [sp, #8]
 80005dc:	9b02      	ldr	r3, [sp, #8]
}
 80005de:	e7d7      	b.n	8000590 <HAL_I2C_MspInit+0x18>
 80005e0:	40005400 	.word	0x40005400
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40020400 	.word	0x40020400

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f0:	2230      	movs	r2, #48	; 0x30
 80005f2:	2100      	movs	r1, #0
 80005f4:	a808      	add	r0, sp, #32
 80005f6:	f001 fc1d 	bl	8001e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fa:	2400      	movs	r4, #0
 80005fc:	9403      	str	r4, [sp, #12]
 80005fe:	9404      	str	r4, [sp, #16]
 8000600:	9405      	str	r4, [sp, #20]
 8000602:	9406      	str	r4, [sp, #24]
 8000604:	9407      	str	r4, [sp, #28]

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000606:	9401      	str	r4, [sp, #4]
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <SystemClock_Config+0x94>)
 800060a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800060c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000610:	641a      	str	r2, [r3, #64]	; 0x40
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	9402      	str	r4, [sp, #8]
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <SystemClock_Config+0x98>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800062e:	9302      	str	r3, [sp, #8]
 8000630:	9b02      	ldr	r3, [sp, #8]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000632:	2502      	movs	r5, #2
 8000634:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000636:	2301      	movs	r3, #1
 8000638:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063a:	2310      	movs	r3, #16
 800063c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000640:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000642:	2308      	movs	r3, #8
 8000644:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000646:	2378      	movs	r3, #120	; 0x78
 8000648:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064a:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800064c:	2304      	movs	r3, #4
 800064e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	a808      	add	r0, sp, #32
 8000652:	f000 fe9d 	bl	8001390 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	230f      	movs	r3, #15
 8000658:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065a:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000662:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800066a:	2103      	movs	r1, #3
 800066c:	a803      	add	r0, sp, #12
 800066e:	f001 f8fb 	bl	8001868 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000672:	4622      	mov	r2, r4
 8000674:	4621      	mov	r1, r4
 8000676:	4620      	mov	r0, r4
 8000678:	f001 f856 	bl	8001728 <HAL_RCC_MCOConfig>
}
 800067c:	b015      	add	sp, #84	; 0x54
 800067e:	bd30      	pop	{r4, r5, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <main>:
{
 8000688:	b508      	push	{r3, lr}
  HAL_Init();
 800068a:	f000 fa5b 	bl	8000b44 <HAL_Init>
  SystemClock_Config();
 800068e:	f7ff ffad 	bl	80005ec <SystemClock_Config>
  MX_GPIO_Init();
 8000692:	f7ff ff1b 	bl	80004cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000696:	f7ff ff51 	bl	800053c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800069a:	f000 f9d9 	bl	8000a50 <MX_USART1_UART_Init>
  oled_Init();
 800069e:	f000 f87b 	bl	8000798 <oled_Init>
	  oled_SetCursor(0,0);
 80006a2:	2100      	movs	r1, #0
 80006a4:	4608      	mov	r0, r1
 80006a6:	f000 f97d 	bl	80009a4 <oled_SetCursor>
	  oled_WriteString("Hello World",Font_11x18,White);
 80006aa:	4c10      	ldr	r4, [pc, #64]	; (80006ec <main+0x64>)
 80006ac:	2301      	movs	r3, #1
 80006ae:	e894 0006 	ldmia.w	r4, {r1, r2}
 80006b2:	480f      	ldr	r0, [pc, #60]	; (80006f0 <main+0x68>)
 80006b4:	f000 f95e 	bl	8000974 <oled_WriteString>
	  oled_UpdateScreen();
 80006b8:	f000 f846 	bl	8000748 <oled_UpdateScreen>
	  HAL_Delay(2000);
 80006bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006c0:	f000 fa6c 	bl	8000b9c <HAL_Delay>
	  oled_Fill(Black);
 80006c4:	2000      	movs	r0, #0
 80006c6:	f000 f82f 	bl	8000728 <oled_Fill>
	  oled_SetCursor(0,0);
 80006ca:	2100      	movs	r1, #0
 80006cc:	4608      	mov	r0, r1
 80006ce:	f000 f969 	bl	80009a4 <oled_SetCursor>
	  oled_WriteString("SDK-1.1M",Font_11x18,White);
 80006d2:	2301      	movs	r3, #1
 80006d4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80006d8:	4806      	ldr	r0, [pc, #24]	; (80006f4 <main+0x6c>)
 80006da:	f000 f94b 	bl	8000974 <oled_WriteString>
	  oled_UpdateScreen();
 80006de:	f000 f833 	bl	8000748 <oled_UpdateScreen>
	  HAL_Delay(2000);
 80006e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006e6:	f000 fa59 	bl	8000b9c <HAL_Delay>
  while (1)
 80006ea:	e7da      	b.n	80006a2 <main+0x1a>
 80006ec:	20000008 	.word	0x20000008
 80006f0:	08004688 	.word	0x08004688
 80006f4:	08004694 	.word	0x08004694

080006f8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006f8:	4770      	bx	lr
	...

080006fc <oled_WriteCommand>:
static uint8_t OLED_Buffer[1024];

static OLED_t OLED;


static void oled_WriteCommand(uint8_t command) {
 80006fc:	b500      	push	{lr}
 80006fe:	b087      	sub	sp, #28
 8000700:	f88d 0017 	strb.w	r0, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x00,1,&command,1,10);
 8000704:	230a      	movs	r3, #10
 8000706:	9302      	str	r3, [sp, #8]
 8000708:	2301      	movs	r3, #1
 800070a:	9301      	str	r3, [sp, #4]
 800070c:	f10d 0217 	add.w	r2, sp, #23
 8000710:	9200      	str	r2, [sp, #0]
 8000712:	2200      	movs	r2, #0
 8000714:	2178      	movs	r1, #120	; 0x78
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <oled_WriteCommand+0x28>)
 8000718:	f000 fd7c 	bl	8001214 <HAL_I2C_Mem_Write>
}
 800071c:	b007      	add	sp, #28
 800071e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000722:	bf00      	nop
 8000724:	20000040 	.word	0x20000040

08000728 <oled_Fill>:
}

void oled_Fill(OLED_COLOR color) {
	uint32_t i;

	for(i = 0; i < sizeof(OLED_Buffer); i++) {
 8000728:	2300      	movs	r3, #0
 800072a:	e003      	b.n	8000734 <oled_Fill+0xc>
		OLED_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800072c:	21ff      	movs	r1, #255	; 0xff
 800072e:	4a05      	ldr	r2, [pc, #20]	; (8000744 <oled_Fill+0x1c>)
 8000730:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < sizeof(OLED_Buffer); i++) {
 8000732:	3301      	adds	r3, #1
 8000734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000738:	d203      	bcs.n	8000742 <oled_Fill+0x1a>
		OLED_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800073a:	2800      	cmp	r0, #0
 800073c:	d1f6      	bne.n	800072c <oled_Fill+0x4>
 800073e:	4601      	mov	r1, r0
 8000740:	e7f5      	b.n	800072e <oled_Fill+0x6>
	}
}
 8000742:	4770      	bx	lr
 8000744:	20000094 	.word	0x20000094

08000748 <oled_UpdateScreen>:


void oled_UpdateScreen(void) {
 8000748:	b510      	push	{r4, lr}
 800074a:	b084      	sub	sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 800074c:	2400      	movs	r4, #0
 800074e:	e01a      	b.n	8000786 <oled_UpdateScreen+0x3e>
		oled_WriteCommand(0xB0 + i);
 8000750:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8000754:	b2c0      	uxtb	r0, r0
 8000756:	f7ff ffd1 	bl	80006fc <oled_WriteCommand>
		oled_WriteCommand(0x00);
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff ffce 	bl	80006fc <oled_WriteCommand>
		oled_WriteCommand(0x10);
 8000760:	2010      	movs	r0, #16
 8000762:	f7ff ffcb 	bl	80006fc <oled_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x40,1,&OLED_Buffer[OLED_WIDTH * i],OLED_WIDTH,25);
 8000766:	2319      	movs	r3, #25
 8000768:	9302      	str	r3, [sp, #8]
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <oled_UpdateScreen+0x48>)
 8000770:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2301      	movs	r3, #1
 8000778:	2240      	movs	r2, #64	; 0x40
 800077a:	2178      	movs	r1, #120	; 0x78
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <oled_UpdateScreen+0x4c>)
 800077e:	f000 fd49 	bl	8001214 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8000782:	3401      	adds	r4, #1
 8000784:	b2e4      	uxtb	r4, r4
 8000786:	2c07      	cmp	r4, #7
 8000788:	d9e2      	bls.n	8000750 <oled_UpdateScreen+0x8>
	}
}
 800078a:	b004      	add	sp, #16
 800078c:	bd10      	pop	{r4, pc}
 800078e:	bf00      	nop
 8000790:	20000094 	.word	0x20000094
 8000794:	20000040 	.word	0x20000040

08000798 <oled_Init>:
uint8_t oled_Init(void) {
 8000798:	b508      	push	{r3, lr}
	HAL_Delay(100);
 800079a:	2064      	movs	r0, #100	; 0x64
 800079c:	f000 f9fe 	bl	8000b9c <HAL_Delay>
	oled_WriteCommand(0xAE);
 80007a0:	20ae      	movs	r0, #174	; 0xae
 80007a2:	f7ff ffab 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0x20);
 80007a6:	2020      	movs	r0, #32
 80007a8:	f7ff ffa8 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0x10);
 80007ac:	2010      	movs	r0, #16
 80007ae:	f7ff ffa5 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0xB0);
 80007b2:	20b0      	movs	r0, #176	; 0xb0
 80007b4:	f7ff ffa2 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0xC8);
 80007b8:	20c8      	movs	r0, #200	; 0xc8
 80007ba:	f7ff ff9f 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0x00);
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff ff9c 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0x10);
 80007c4:	2010      	movs	r0, #16
 80007c6:	f7ff ff99 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0x40);
 80007ca:	2040      	movs	r0, #64	; 0x40
 80007cc:	f7ff ff96 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0x81);
 80007d0:	2081      	movs	r0, #129	; 0x81
 80007d2:	f7ff ff93 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0xFF);
 80007d6:	20ff      	movs	r0, #255	; 0xff
 80007d8:	f7ff ff90 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0xA1);
 80007dc:	20a1      	movs	r0, #161	; 0xa1
 80007de:	f7ff ff8d 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0xA6);
 80007e2:	20a6      	movs	r0, #166	; 0xa6
 80007e4:	f7ff ff8a 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0xA8);
 80007e8:	20a8      	movs	r0, #168	; 0xa8
 80007ea:	f7ff ff87 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0x3F);
 80007ee:	203f      	movs	r0, #63	; 0x3f
 80007f0:	f7ff ff84 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0xA4);
 80007f4:	20a4      	movs	r0, #164	; 0xa4
 80007f6:	f7ff ff81 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0xD3);
 80007fa:	20d3      	movs	r0, #211	; 0xd3
 80007fc:	f7ff ff7e 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0x00);
 8000800:	2000      	movs	r0, #0
 8000802:	f7ff ff7b 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0xD5);
 8000806:	20d5      	movs	r0, #213	; 0xd5
 8000808:	f7ff ff78 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0xF0);
 800080c:	20f0      	movs	r0, #240	; 0xf0
 800080e:	f7ff ff75 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0xD9);
 8000812:	20d9      	movs	r0, #217	; 0xd9
 8000814:	f7ff ff72 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0x22);
 8000818:	2022      	movs	r0, #34	; 0x22
 800081a:	f7ff ff6f 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0xDA);
 800081e:	20da      	movs	r0, #218	; 0xda
 8000820:	f7ff ff6c 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0x12);
 8000824:	2012      	movs	r0, #18
 8000826:	f7ff ff69 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0xDB);
 800082a:	20db      	movs	r0, #219	; 0xdb
 800082c:	f7ff ff66 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0x20);
 8000830:	2020      	movs	r0, #32
 8000832:	f7ff ff63 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0x8D);
 8000836:	208d      	movs	r0, #141	; 0x8d
 8000838:	f7ff ff60 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0x14);
 800083c:	2014      	movs	r0, #20
 800083e:	f7ff ff5d 	bl	80006fc <oled_WriteCommand>
	oled_WriteCommand(0xAF);
 8000842:	20af      	movs	r0, #175	; 0xaf
 8000844:	f7ff ff5a 	bl	80006fc <oled_WriteCommand>
	oled_Fill(Black);
 8000848:	2000      	movs	r0, #0
 800084a:	f7ff ff6d 	bl	8000728 <oled_Fill>
	oled_UpdateScreen();
 800084e:	f7ff ff7b 	bl	8000748 <oled_UpdateScreen>
	OLED.CurrentX = 0;
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <oled_Init+0xd0>)
 8000854:	2200      	movs	r2, #0
 8000856:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	OLED.CurrentY = 0;
 800085a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
	OLED.Initialized = 1;
 800085e:	2001      	movs	r0, #1
 8000860:	f883 0405 	strb.w	r0, [r3, #1029]	; 0x405
}
 8000864:	bd08      	pop	{r3, pc}
 8000866:	bf00      	nop
 8000868:	20000094 	.word	0x20000094

0800086c <oled_DrawPixel>:

void oled_DrawPixel(uint8_t x, uint8_t y, OLED_COLOR color) {
	if (x >= OLED_WIDTH || y >= OLED_HEIGHT) {
 800086c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8000870:	d116      	bne.n	80008a0 <oled_DrawPixel+0x34>
 8000872:	293f      	cmp	r1, #63	; 0x3f
 8000874:	d814      	bhi.n	80008a0 <oled_DrawPixel+0x34>
		return;
	}

	if (OLED.Inverted) {
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <oled_DrawPixel+0x50>)
 8000878:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 800087c:	b113      	cbz	r3, 8000884 <oled_DrawPixel+0x18>
		color = (OLED_COLOR)!color;
 800087e:	fab2 f282 	clz	r2, r2
 8000882:	0952      	lsrs	r2, r2, #5
	}

	if (color == White) {
 8000884:	2a01      	cmp	r2, #1
 8000886:	d00c      	beq.n	80008a2 <oled_DrawPixel+0x36>
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
	} else {
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 8000888:	08cb      	lsrs	r3, r1, #3
 800088a:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 800088e:	f001 0107 	and.w	r1, r1, #7
 8000892:	2301      	movs	r3, #1
 8000894:	408b      	lsls	r3, r1
 8000896:	4a09      	ldr	r2, [pc, #36]	; (80008bc <oled_DrawPixel+0x50>)
 8000898:	5c11      	ldrb	r1, [r2, r0]
 800089a:	ea21 0103 	bic.w	r1, r1, r3
 800089e:	5411      	strb	r1, [r2, r0]
	}
}
 80008a0:	4770      	bx	lr
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 80008a2:	08cb      	lsrs	r3, r1, #3
 80008a4:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80008a8:	f001 0107 	and.w	r1, r1, #7
 80008ac:	2301      	movs	r3, #1
 80008ae:	408b      	lsls	r3, r1
 80008b0:	4a02      	ldr	r2, [pc, #8]	; (80008bc <oled_DrawPixel+0x50>)
 80008b2:	5c11      	ldrb	r1, [r2, r0]
 80008b4:	4319      	orrs	r1, r3
 80008b6:	5411      	strb	r1, [r2, r0]
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000094 	.word	0x20000094

080008c0 <oled_WriteChar>:
	oled_DrawHLine(x1, x2, y1, color);
	oled_DrawHLine(x1, x2, y2, color);
	oled_DrawVLine(y1, y2, x1, color);
	oled_DrawVLine(y1, y2, x2, color);
}
char oled_WriteChar(char ch, FontDef Font, OLED_COLOR color) {
 80008c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	4681      	mov	r9, r0
 80008c8:	a802      	add	r0, sp, #8
 80008ca:	e900 0006 	stmdb	r0, {r1, r2}
 80008ce:	4698      	mov	r8, r3
	uint32_t i, b, j;

	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 80008d0:	4b27      	ldr	r3, [pc, #156]	; (8000970 <oled_WriteChar+0xb0>)
 80008d2:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80008d6:	f89d 6000 	ldrb.w	r6, [sp]
 80008da:	4433      	add	r3, r6
 80008dc:	2b7f      	cmp	r3, #127	; 0x7f
 80008de:	dc42      	bgt.n	8000966 <oled_WriteChar+0xa6>
			OLED_HEIGHT <= (OLED.CurrentY + Font.FontHeight)) {
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <oled_WriteChar+0xb0>)
 80008e2:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80008e6:	f89d a001 	ldrb.w	sl, [sp, #1]
 80008ea:	4453      	add	r3, sl
	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 80008ec:	2b3f      	cmp	r3, #63	; 0x3f
 80008ee:	dc3c      	bgt.n	800096a <oled_WriteChar+0xaa>
		return 0;
	}

	for (i = 0; i < Font.FontHeight; i++) {
 80008f0:	2500      	movs	r5, #0
 80008f2:	e023      	b.n	800093c <oled_WriteChar+0x7c>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
		for (j = 0; j < Font.FontWidth; j++) {
			if ((b << j) & 0x8000) {
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR) color);
			} else {
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR)!color);
 80008f4:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <oled_WriteChar+0xb0>)
 80008f6:	f8b3 0400 	ldrh.w	r0, [r3, #1024]	; 0x400
 80008fa:	f8b3 1402 	ldrh.w	r1, [r3, #1026]	; 0x402
 80008fe:	4429      	add	r1, r5
 8000900:	4420      	add	r0, r4
 8000902:	fab8 f288 	clz	r2, r8
 8000906:	0952      	lsrs	r2, r2, #5
 8000908:	b2c9      	uxtb	r1, r1
 800090a:	b2c0      	uxtb	r0, r0
 800090c:	f7ff ffae 	bl	800086c <oled_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++) {
 8000910:	3401      	adds	r4, #1
 8000912:	42a6      	cmp	r6, r4
 8000914:	d911      	bls.n	800093a <oled_WriteChar+0x7a>
			if ((b << j) & 0x8000) {
 8000916:	fa07 f304 	lsl.w	r3, r7, r4
 800091a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800091e:	d0e9      	beq.n	80008f4 <oled_WriteChar+0x34>
				oled_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR) color);
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <oled_WriteChar+0xb0>)
 8000922:	f8b3 0400 	ldrh.w	r0, [r3, #1024]	; 0x400
 8000926:	f8b3 1402 	ldrh.w	r1, [r3, #1026]	; 0x402
 800092a:	4429      	add	r1, r5
 800092c:	4420      	add	r0, r4
 800092e:	4642      	mov	r2, r8
 8000930:	b2c9      	uxtb	r1, r1
 8000932:	b2c0      	uxtb	r0, r0
 8000934:	f7ff ff9a 	bl	800086c <oled_DrawPixel>
 8000938:	e7ea      	b.n	8000910 <oled_WriteChar+0x50>
	for (i = 0; i < Font.FontHeight; i++) {
 800093a:	3501      	adds	r5, #1
 800093c:	45aa      	cmp	sl, r5
 800093e:	d908      	bls.n	8000952 <oled_WriteChar+0x92>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000940:	f1a9 0320 	sub.w	r3, r9, #32
 8000944:	fb03 530a 	mla	r3, r3, sl, r5
 8000948:	9a01      	ldr	r2, [sp, #4]
 800094a:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
		for (j = 0; j < Font.FontWidth; j++) {
 800094e:	2400      	movs	r4, #0
 8000950:	e7df      	b.n	8000912 <oled_WriteChar+0x52>
			}
		}
	}

	OLED.CurrentX += Font.FontWidth;
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <oled_WriteChar+0xb0>)
 8000954:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8000958:	4416      	add	r6, r2
 800095a:	f8a3 6400 	strh.w	r6, [r3, #1024]	; 0x400

	return ch;
 800095e:	4648      	mov	r0, r9
}
 8000960:	b002      	add	sp, #8
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
 8000966:	2000      	movs	r0, #0
 8000968:	e7fa      	b.n	8000960 <oled_WriteChar+0xa0>
 800096a:	2000      	movs	r0, #0
 800096c:	e7f8      	b.n	8000960 <oled_WriteChar+0xa0>
 800096e:	bf00      	nop
 8000970:	20000094 	.word	0x20000094

08000974 <oled_WriteString>:

char oled_WriteString(char* str, FontDef Font, OLED_COLOR color) {
 8000974:	b530      	push	{r4, r5, lr}
 8000976:	b083      	sub	sp, #12
 8000978:	4604      	mov	r4, r0
 800097a:	a802      	add	r0, sp, #8
 800097c:	e900 0006 	stmdb	r0, {r1, r2}
 8000980:	461d      	mov	r5, r3
	while (*str) {
 8000982:	e000      	b.n	8000986 <oled_WriteString+0x12>
		if (oled_WriteChar(*str, Font, color) != *str) {
			return *str;
		}
		str++;
 8000984:	3401      	adds	r4, #1
	while (*str) {
 8000986:	7820      	ldrb	r0, [r4, #0]
 8000988:	b148      	cbz	r0, 800099e <oled_WriteString+0x2a>
		if (oled_WriteChar(*str, Font, color) != *str) {
 800098a:	462b      	mov	r3, r5
 800098c:	aa02      	add	r2, sp, #8
 800098e:	e912 0006 	ldmdb	r2, {r1, r2}
 8000992:	f7ff ff95 	bl	80008c0 <oled_WriteChar>
 8000996:	4602      	mov	r2, r0
 8000998:	7820      	ldrb	r0, [r4, #0]
 800099a:	4282      	cmp	r2, r0
 800099c:	d0f2      	beq.n	8000984 <oled_WriteString+0x10>
	}
	return *str;
}
 800099e:	b003      	add	sp, #12
 80009a0:	bd30      	pop	{r4, r5, pc}
	...

080009a4 <oled_SetCursor>:

void oled_SetCursor(uint8_t x, uint8_t y) {
	OLED.CurrentX = x;
 80009a4:	4b02      	ldr	r3, [pc, #8]	; (80009b0 <oled_SetCursor+0xc>)
 80009a6:	f8a3 0400 	strh.w	r0, [r3, #1024]	; 0x400
	OLED.CurrentY = y;
 80009aa:	f8a3 1402 	strh.w	r1, [r3, #1026]	; 0x402
}
 80009ae:	4770      	bx	lr
 80009b0:	20000094 	.word	0x20000094

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	2100      	movs	r1, #0
 80009b8:	9100      	str	r1, [sp, #0]
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_MspInit+0x34>)
 80009bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80009c2:	645a      	str	r2, [r3, #68]	; 0x44
 80009c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009c6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80009ca:	9200      	str	r2, [sp, #0]
 80009cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	9101      	str	r1, [sp, #4]
 80009d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009d6:	641a      	str	r2, [r3, #64]	; 0x40
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	9301      	str	r3, [sp, #4]
 80009e0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	b002      	add	sp, #8
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009ec:	4770      	bx	lr

080009ee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler>

080009f0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <MemManage_Handler>

080009f2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <BusFault_Handler>

080009f4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler>

080009f6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f6:	4770      	bx	lr

080009f8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f8:	4770      	bx	lr

080009fa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	4770      	bx	lr

080009fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fe:	f000 f8bb 	bl	8000b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a02:	bd08      	pop	{r3, pc}

08000a04 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a04:	490f      	ldr	r1, [pc, #60]	; (8000a44 <SystemInit+0x40>)
 8000a06:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000a0a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <SystemInit+0x44>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	f042 0201 	orr.w	r2, r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000a26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a2a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a2c:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <SystemInit+0x48>)
 8000a2e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a36:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a38:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a3e:	608b      	str	r3, [r1, #8]
#endif
}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000ed00 	.word	0xe000ed00
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	24003010 	.word	0x24003010

08000a50 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a50:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8000a52:	480a      	ldr	r0, [pc, #40]	; (8000a7c <MX_USART1_UART_Init+0x2c>)
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MX_USART1_UART_Init+0x30>)
 8000a56:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000a58:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000a5c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a62:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a64:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a66:	220c      	movs	r2, #12
 8000a68:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a6e:	f001 f963 	bl	8001d38 <HAL_UART_Init>
 8000a72:	b900      	cbnz	r0, 8000a76 <MX_USART1_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 8000a74:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000a76:	f7ff fe3f 	bl	80006f8 <Error_Handler>
}
 8000a7a:	e7fb      	b.n	8000a74 <MX_USART1_UART_Init+0x24>
 8000a7c:	2000049c 	.word	0x2000049c
 8000a80:	40011000 	.word	0x40011000

08000a84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a84:	b500      	push	{lr}
 8000a86:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	2300      	movs	r3, #0
 8000a8a:	9303      	str	r3, [sp, #12]
 8000a8c:	9304      	str	r3, [sp, #16]
 8000a8e:	9305      	str	r3, [sp, #20]
 8000a90:	9306      	str	r3, [sp, #24]
 8000a92:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8000a94:	6802      	ldr	r2, [r0, #0]
 8000a96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a9a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d002      	beq.n	8000aa8 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000aa2:	b009      	add	sp, #36	; 0x24
 8000aa4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	9101      	str	r1, [sp, #4]
 8000aac:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8000ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ab2:	f042 0210 	orr.w	r2, r2, #16
 8000ab6:	645a      	str	r2, [r3, #68]	; 0x44
 8000ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000aba:	f002 0210 	and.w	r2, r2, #16
 8000abe:	9201      	str	r2, [sp, #4]
 8000ac0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	9102      	str	r1, [sp, #8]
 8000ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ac6:	f042 0201 	orr.w	r2, r2, #1
 8000aca:	631a      	str	r2, [r3, #48]	; 0x30
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	9302      	str	r3, [sp, #8]
 8000ad4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ad6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ada:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ae8:	2307      	movs	r3, #7
 8000aea:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aec:	a903      	add	r1, sp, #12
 8000aee:	4802      	ldr	r0, [pc, #8]	; (8000af8 <HAL_UART_MspInit+0x74>)
 8000af0:	f000 f8c6 	bl	8000c80 <HAL_GPIO_Init>
}
 8000af4:	e7d5      	b.n	8000aa2 <HAL_UART_MspInit+0x1e>
 8000af6:	bf00      	nop
 8000af8:	40020000 	.word	0x40020000

08000afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b510      	push	{r4, lr}
 8000afe:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_InitTick+0x40>)
 8000b02:	7818      	ldrb	r0, [r3, #0]
 8000b04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b08:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b0c:	4a0c      	ldr	r2, [pc, #48]	; (8000b40 <HAL_InitTick+0x44>)
 8000b0e:	6810      	ldr	r0, [r2, #0]
 8000b10:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b14:	f000 f8a0 	bl	8000c58 <HAL_SYSTICK_Config>
 8000b18:	b968      	cbnz	r0, 8000b36 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	2c0f      	cmp	r4, #15
 8000b1c:	d901      	bls.n	8000b22 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000b1e:	2001      	movs	r0, #1
 8000b20:	e00a      	b.n	8000b38 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b22:	2200      	movs	r2, #0
 8000b24:	4621      	mov	r1, r4
 8000b26:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2a:	f000 f85d 	bl	8000be8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b2e:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <HAL_InitTick+0x40>)
 8000b30:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000b32:	2000      	movs	r0, #0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000b36:	2001      	movs	r0, #1
}
 8000b38:	bd10      	pop	{r4, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2000001c 	.word	0x2000001c
 8000b40:	20000018 	.word	0x20000018

08000b44 <HAL_Init>:
{
 8000b44:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <HAL_Init+0x30>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b4e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b56:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b5e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f82f 	bl	8000bc4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff ffc8 	bl	8000afc <HAL_InitTick>
  HAL_MspInit();
 8000b6c:	f7ff ff22 	bl	80009b4 <HAL_MspInit>
}
 8000b70:	2000      	movs	r0, #0
 8000b72:	bd08      	pop	{r3, pc}
 8000b74:	40023c00 	.word	0x40023c00

08000b78 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b78:	4a03      	ldr	r2, [pc, #12]	; (8000b88 <HAL_IncTick+0x10>)
 8000b7a:	6811      	ldr	r1, [r2, #0]
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_IncTick+0x14>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	440b      	add	r3, r1
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	200004dc 	.word	0x200004dc
 8000b8c:	2000001c 	.word	0x2000001c

08000b90 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b90:	4b01      	ldr	r3, [pc, #4]	; (8000b98 <HAL_GetTick+0x8>)
 8000b92:	6818      	ldr	r0, [r3, #0]
}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	200004dc 	.word	0x200004dc

08000b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b9c:	b538      	push	{r3, r4, r5, lr}
 8000b9e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ba0:	f7ff fff6 	bl	8000b90 <HAL_GetTick>
 8000ba4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000baa:	d002      	beq.n	8000bb2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <HAL_Delay+0x24>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bb2:	f7ff ffed 	bl	8000b90 <HAL_GetTick>
 8000bb6:	1b40      	subs	r0, r0, r5
 8000bb8:	42a0      	cmp	r0, r4
 8000bba:	d3fa      	bcc.n	8000bb2 <HAL_Delay+0x16>
  {
  }
}
 8000bbc:	bd38      	pop	{r3, r4, r5, pc}
 8000bbe:	bf00      	nop
 8000bc0:	2000001c 	.word	0x2000001c

08000bc4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000bc6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bcc:	041b      	lsls	r3, r3, #16
 8000bce:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000bd0:	0200      	lsls	r0, r0, #8
 8000bd2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000be0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000be8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <HAL_NVIC_SetPriority+0x68>)
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf2:	f1c3 0c07 	rsb	ip, r3, #7
 8000bf6:	f1bc 0f04 	cmp.w	ip, #4
 8000bfa:	bf28      	it	cs
 8000bfc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c00:	f103 0e04 	add.w	lr, r3, #4
 8000c04:	f1be 0f06 	cmp.w	lr, #6
 8000c08:	d918      	bls.n	8000c3c <HAL_NVIC_SetPriority+0x54>
 8000c0a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	f04f 3eff 	mov.w	lr, #4294967295
 8000c10:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000c14:	ea21 010c 	bic.w	r1, r1, ip
 8000c18:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1a:	fa0e f303 	lsl.w	r3, lr, r3
 8000c1e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c22:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000c24:	2800      	cmp	r0, #0
 8000c26:	db0b      	blt.n	8000c40 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	0109      	lsls	r1, r1, #4
 8000c2a:	b2c9      	uxtb	r1, r1
 8000c2c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c30:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c34:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c38:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e7e5      	b.n	8000c0c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c40:	f000 000f 	and.w	r0, r0, #15
 8000c44:	0109      	lsls	r1, r1, #4
 8000c46:	b2c9      	uxtb	r1, r1
 8000c48:	4b02      	ldr	r3, [pc, #8]	; (8000c54 <HAL_NVIC_SetPriority+0x6c>)
 8000c4a:	5419      	strb	r1, [r3, r0]
 8000c4c:	e7f4      	b.n	8000c38 <HAL_NVIC_SetPriority+0x50>
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00
 8000c54:	e000ed14 	.word	0xe000ed14

08000c58 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	3801      	subs	r0, #1
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c5e:	d20b      	bcs.n	8000c78 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c60:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000c64:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <HAL_SYSTICK_Config+0x24>)
 8000c68:	21f0      	movs	r1, #240	; 0xf0
 8000c6a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6e:	2000      	movs	r0, #0
 8000c70:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c72:	2207      	movs	r2, #7
 8000c74:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c76:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c78:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c80:	2300      	movs	r3, #0
 8000c82:	2b0f      	cmp	r3, #15
 8000c84:	f200 80d8 	bhi.w	8000e38 <HAL_GPIO_Init+0x1b8>
{
 8000c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	e03a      	b.n	8000d04 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c8e:	2207      	movs	r2, #7
 8000c90:	e000      	b.n	8000c94 <HAL_GPIO_Init+0x14>
 8000c92:	2200      	movs	r2, #0
 8000c94:	40aa      	lsls	r2, r5
 8000c96:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c98:	3402      	adds	r4, #2
 8000c9a:	4d68      	ldr	r5, [pc, #416]	; (8000e3c <HAL_GPIO_Init+0x1bc>)
 8000c9c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ca0:	4a67      	ldr	r2, [pc, #412]	; (8000e40 <HAL_GPIO_Init+0x1c0>)
 8000ca2:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ca4:	ea6f 020c 	mvn.w	r2, ip
 8000ca8:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cac:	684e      	ldr	r6, [r1, #4]
 8000cae:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8000cb2:	d001      	beq.n	8000cb8 <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8000cb4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8000cb8:	4c61      	ldr	r4, [pc, #388]	; (8000e40 <HAL_GPIO_Init+0x1c0>)
 8000cba:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8000cbc:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000cbe:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cc2:	684e      	ldr	r6, [r1, #4]
 8000cc4:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8000cc8:	d001      	beq.n	8000cce <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 8000cca:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000cce:	4c5c      	ldr	r4, [pc, #368]	; (8000e40 <HAL_GPIO_Init+0x1c0>)
 8000cd0:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cd2:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000cd4:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cd8:	684e      	ldr	r6, [r1, #4]
 8000cda:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8000cde:	d001      	beq.n	8000ce4 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 8000ce0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000ce4:	4c56      	ldr	r4, [pc, #344]	; (8000e40 <HAL_GPIO_Init+0x1c0>)
 8000ce6:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000ce8:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000cea:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cec:	684d      	ldr	r5, [r1, #4]
 8000cee:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8000cf2:	d001      	beq.n	8000cf8 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8000cf4:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 8000cf8:	4c51      	ldr	r4, [pc, #324]	; (8000e40 <HAL_GPIO_Init+0x1c0>)
 8000cfa:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	2b0f      	cmp	r3, #15
 8000d00:	f200 8098 	bhi.w	8000e34 <HAL_GPIO_Init+0x1b4>
    ioposition = 0x01U << position;
 8000d04:	2201      	movs	r2, #1
 8000d06:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d08:	680c      	ldr	r4, [r1, #0]
 8000d0a:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000d0e:	ea32 0404 	bics.w	r4, r2, r4
 8000d12:	d1f3      	bne.n	8000cfc <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d14:	684c      	ldr	r4, [r1, #4]
 8000d16:	2c02      	cmp	r4, #2
 8000d18:	d001      	beq.n	8000d1e <HAL_GPIO_Init+0x9e>
 8000d1a:	2c12      	cmp	r4, #18
 8000d1c:	d110      	bne.n	8000d40 <HAL_GPIO_Init+0xc0>
        temp = GPIOx->AFR[position >> 3U];
 8000d1e:	08dd      	lsrs	r5, r3, #3
 8000d20:	3508      	adds	r5, #8
 8000d22:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d26:	f003 0407 	and.w	r4, r3, #7
 8000d2a:	00a6      	lsls	r6, r4, #2
 8000d2c:	240f      	movs	r4, #15
 8000d2e:	40b4      	lsls	r4, r6
 8000d30:	ea27 0e04 	bic.w	lr, r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d34:	690c      	ldr	r4, [r1, #16]
 8000d36:	40b4      	lsls	r4, r6
 8000d38:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000d3c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8000d40:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d42:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000d46:	2403      	movs	r4, #3
 8000d48:	fa04 f40e 	lsl.w	r4, r4, lr
 8000d4c:	43e5      	mvns	r5, r4
 8000d4e:	ea26 0604 	bic.w	r6, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d52:	684c      	ldr	r4, [r1, #4]
 8000d54:	f004 0403 	and.w	r4, r4, #3
 8000d58:	fa04 f40e 	lsl.w	r4, r4, lr
 8000d5c:	4334      	orrs	r4, r6
      GPIOx->MODER = temp;
 8000d5e:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d60:	684c      	ldr	r4, [r1, #4]
 8000d62:	1e66      	subs	r6, r4, #1
 8000d64:	2e01      	cmp	r6, #1
 8000d66:	d903      	bls.n	8000d70 <HAL_GPIO_Init+0xf0>
 8000d68:	2c11      	cmp	r4, #17
 8000d6a:	d001      	beq.n	8000d70 <HAL_GPIO_Init+0xf0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d6c:	2c12      	cmp	r4, #18
 8000d6e:	d10f      	bne.n	8000d90 <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8000d70:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d72:	402e      	ands	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d74:	68cc      	ldr	r4, [r1, #12]
 8000d76:	fa04 f40e 	lsl.w	r4, r4, lr
 8000d7a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000d7c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d7e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d80:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d84:	684c      	ldr	r4, [r1, #4]
 8000d86:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8000d8a:	409c      	lsls	r4, r3
 8000d8c:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8000d8e:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8000d90:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d92:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d94:	688a      	ldr	r2, [r1, #8]
 8000d96:	fa02 f20e 	lsl.w	r2, r2, lr
 8000d9a:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8000d9c:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d9e:	684a      	ldr	r2, [r1, #4]
 8000da0:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000da4:	d0aa      	beq.n	8000cfc <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	2200      	movs	r2, #0
 8000da8:	9201      	str	r2, [sp, #4]
 8000daa:	4a26      	ldr	r2, [pc, #152]	; (8000e44 <HAL_GPIO_Init+0x1c4>)
 8000dac:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000dae:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000db2:	6454      	str	r4, [r2, #68]	; 0x44
 8000db4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000db6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000dba:	9201      	str	r2, [sp, #4]
 8000dbc:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000dbe:	089c      	lsrs	r4, r3, #2
 8000dc0:	1ca5      	adds	r5, r4, #2
 8000dc2:	4a1e      	ldr	r2, [pc, #120]	; (8000e3c <HAL_GPIO_Init+0x1bc>)
 8000dc4:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dc8:	f003 0203 	and.w	r2, r3, #3
 8000dcc:	0095      	lsls	r5, r2, #2
 8000dce:	220f      	movs	r2, #15
 8000dd0:	40aa      	lsls	r2, r5
 8000dd2:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dd6:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <HAL_GPIO_Init+0x1c8>)
 8000dd8:	4290      	cmp	r0, r2
 8000dda:	f43f af5a 	beq.w	8000c92 <HAL_GPIO_Init+0x12>
 8000dde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000de2:	4290      	cmp	r0, r2
 8000de4:	d01a      	beq.n	8000e1c <HAL_GPIO_Init+0x19c>
 8000de6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dea:	4290      	cmp	r0, r2
 8000dec:	d018      	beq.n	8000e20 <HAL_GPIO_Init+0x1a0>
 8000dee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000df2:	4290      	cmp	r0, r2
 8000df4:	d016      	beq.n	8000e24 <HAL_GPIO_Init+0x1a4>
 8000df6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	d014      	beq.n	8000e28 <HAL_GPIO_Init+0x1a8>
 8000dfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e02:	4290      	cmp	r0, r2
 8000e04:	d012      	beq.n	8000e2c <HAL_GPIO_Init+0x1ac>
 8000e06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	d010      	beq.n	8000e30 <HAL_GPIO_Init+0x1b0>
 8000e0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e12:	4290      	cmp	r0, r2
 8000e14:	f43f af3b 	beq.w	8000c8e <HAL_GPIO_Init+0xe>
 8000e18:	2208      	movs	r2, #8
 8000e1a:	e73b      	b.n	8000c94 <HAL_GPIO_Init+0x14>
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	e739      	b.n	8000c94 <HAL_GPIO_Init+0x14>
 8000e20:	2202      	movs	r2, #2
 8000e22:	e737      	b.n	8000c94 <HAL_GPIO_Init+0x14>
 8000e24:	2203      	movs	r2, #3
 8000e26:	e735      	b.n	8000c94 <HAL_GPIO_Init+0x14>
 8000e28:	2204      	movs	r2, #4
 8000e2a:	e733      	b.n	8000c94 <HAL_GPIO_Init+0x14>
 8000e2c:	2205      	movs	r2, #5
 8000e2e:	e731      	b.n	8000c94 <HAL_GPIO_Init+0x14>
 8000e30:	2206      	movs	r2, #6
 8000e32:	e72f      	b.n	8000c94 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000e34:	b003      	add	sp, #12
 8000e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40013800 	.word	0x40013800
 8000e40:	40013c00 	.word	0x40013c00
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020000 	.word	0x40020000

08000e4c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e4c:	6803      	ldr	r3, [r0, #0]
 8000e4e:	695a      	ldr	r2, [r3, #20]
 8000e50:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000e54:	d101      	bne.n	8000e5a <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8000e56:	2000      	movs	r0, #0
}
 8000e58:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000e5e:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000e60:	2304      	movs	r3, #4
 8000e62:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8000e68:	2220      	movs	r2, #32
 8000e6a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8000e6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8000e72:	2001      	movs	r0, #1
 8000e74:	4770      	bx	lr

08000e76 <I2C_WaitOnFlagUntilTimeout>:
{
 8000e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e7a:	4607      	mov	r7, r0
 8000e7c:	460d      	mov	r5, r1
 8000e7e:	4690      	mov	r8, r2
 8000e80:	461e      	mov	r6, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000e82:	e020      	b.n	8000ec6 <I2C_WaitOnFlagUntilTimeout+0x50>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000e84:	b12e      	cbz	r6, 8000e92 <I2C_WaitOnFlagUntilTimeout+0x1c>
 8000e86:	f7ff fe83 	bl	8000b90 <HAL_GetTick>
 8000e8a:	9b06      	ldr	r3, [sp, #24]
 8000e8c:	1ac0      	subs	r0, r0, r3
 8000e8e:	42b0      	cmp	r0, r6
 8000e90:	d919      	bls.n	8000ec6 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000e96:	2220      	movs	r2, #32
 8000e98:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e9c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        __HAL_UNLOCK(hi2c);
 8000ea0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	e01e      	b.n	8000ee6 <I2C_WaitOnFlagUntilTimeout+0x70>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	699c      	ldr	r4, [r3, #24]
 8000eac:	ea25 0c04 	bic.w	ip, r5, r4
 8000eb0:	fa1f fc8c 	uxth.w	ip, ip
 8000eb4:	fabc fc8c 	clz	ip, ip
 8000eb8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8000ebc:	45e0      	cmp	r8, ip
 8000ebe:	d111      	bne.n	8000ee4 <I2C_WaitOnFlagUntilTimeout+0x6e>
    if(Timeout != HAL_MAX_DELAY)
 8000ec0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000ec4:	d1de      	bne.n	8000e84 <I2C_WaitOnFlagUntilTimeout+0xe>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000ec6:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d1ec      	bne.n	8000ea8 <I2C_WaitOnFlagUntilTimeout+0x32>
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	ea25 0c03 	bic.w	ip, r5, r3
 8000ed6:	fa1f fc8c 	uxth.w	ip, ip
 8000eda:	fabc fc8c 	clz	ip, ip
 8000ede:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8000ee2:	e7eb      	b.n	8000ebc <I2C_WaitOnFlagUntilTimeout+0x46>
  return HAL_OK;
 8000ee4:	2000      	movs	r0, #0
}
 8000ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000eea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eee:	4605      	mov	r5, r0
 8000ef0:	460e      	mov	r6, r1
 8000ef2:	4617      	mov	r7, r2
 8000ef4:	4698      	mov	r8, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000ef6:	e033      	b.n	8000f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x76>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000efe:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000f00:	682b      	ldr	r3, [r5, #0]
 8000f02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000f06:	615a      	str	r2, [r3, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	642b      	str	r3, [r5, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8000f10:	2220      	movs	r2, #32
 8000f12:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8000f16:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	e02e      	b.n	8000f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000f1e:	b12f      	cbz	r7, 8000f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x42>
 8000f20:	f7ff fe36 	bl	8000b90 <HAL_GetTick>
 8000f24:	eba0 0008 	sub.w	r0, r0, r8
 8000f28:	42b8      	cmp	r0, r7
 8000f2a:	d919      	bls.n	8000f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x76>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000f30:	2220      	movs	r2, #32
 8000f32:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000f36:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000f3a:	2003      	movs	r0, #3
 8000f3c:	e01e      	b.n	8000f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000f3e:	682b      	ldr	r3, [r5, #0]
 8000f40:	699c      	ldr	r4, [r3, #24]
 8000f42:	ea26 0404 	bic.w	r4, r6, r4
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	3c00      	subs	r4, #0
 8000f4a:	bf18      	it	ne
 8000f4c:	2401      	movne	r4, #1
 8000f4e:	b1a4      	cbz	r4, 8000f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x90>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000f50:	682b      	ldr	r3, [r5, #0]
 8000f52:	695a      	ldr	r2, [r3, #20]
 8000f54:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000f58:	d1ce      	bne.n	8000ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if(Timeout != HAL_MAX_DELAY)
 8000f5a:	f1b7 3fff 	cmp.w	r7, #4294967295
 8000f5e:	d1de      	bne.n	8000f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x34>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000f60:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d1ea      	bne.n	8000f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>
 8000f68:	682b      	ldr	r3, [r5, #0]
 8000f6a:	695c      	ldr	r4, [r3, #20]
 8000f6c:	ea26 0404 	bic.w	r4, r6, r4
 8000f70:	b2a4      	uxth	r4, r4
 8000f72:	3c00      	subs	r4, #0
 8000f74:	bf18      	it	ne
 8000f76:	2401      	movne	r4, #1
 8000f78:	e7e9      	b.n	8000f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
  return HAL_OK;
 8000f7a:	2000      	movs	r0, #0
}
 8000f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000f80 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8000f80:	b570      	push	{r4, r5, r6, lr}
 8000f82:	4604      	mov	r4, r0
 8000f84:	460d      	mov	r5, r1
 8000f86:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000f90:	d119      	bne.n	8000fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x46>
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000f92:	4620      	mov	r0, r4
 8000f94:	f7ff ff5a 	bl	8000e4c <I2C_IsAcknowledgeFailed>
 8000f98:	b9b8      	cbnz	r0, 8000fca <I2C_WaitOnTXEFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 8000f9a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000f9e:	d0f3      	beq.n	8000f88 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000fa0:	b125      	cbz	r5, 8000fac <I2C_WaitOnTXEFlagUntilTimeout+0x2c>
 8000fa2:	f7ff fdf5 	bl	8000b90 <HAL_GetTick>
 8000fa6:	1b80      	subs	r0, r0, r6
 8000fa8:	42a8      	cmp	r0, r5
 8000faa:	d9ed      	bls.n	8000f88 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000fac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fae:	f043 0320 	orr.w	r3, r3, #32
 8000fb2:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000fb8:	2220      	movs	r2, #32
 8000fba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000fbe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000fc2:	2003      	movs	r0, #3
 8000fc4:	e000      	b.n	8000fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
  return HAL_OK;      
 8000fc6:	2000      	movs	r0, #0
}
 8000fc8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000fca:	2001      	movs	r0, #1
 8000fcc:	e7fc      	b.n	8000fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
	...

08000fd0 <I2C_RequestMemoryWrite>:
{
 8000fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fd4:	b085      	sub	sp, #20
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	460d      	mov	r5, r1
 8000fda:	4691      	mov	r9, r2
 8000fdc:	4698      	mov	r8, r3
 8000fde:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8000fe0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000fe2:	6803      	ldr	r3, [r0, #0]
 8000fe4:	6819      	ldr	r1, [r3, #0]
 8000fe6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000fea:	6019      	str	r1, [r3, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000fec:	9700      	str	r7, [sp, #0]
 8000fee:	4633      	mov	r3, r6
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000ff6:	f7ff ff3e 	bl	8000e76 <I2C_WaitOnFlagUntilTimeout>
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	d14e      	bne.n	800109c <I2C_RequestMemoryWrite+0xcc>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000ffe:	6823      	ldr	r3, [r4, #0]
 8001000:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001004:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	4632      	mov	r2, r6
 800100a:	4926      	ldr	r1, [pc, #152]	; (80010a4 <I2C_RequestMemoryWrite+0xd4>)
 800100c:	4620      	mov	r0, r4
 800100e:	f7ff ff6c 	bl	8000eea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001012:	b130      	cbz	r0, 8001022 <I2C_RequestMemoryWrite+0x52>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001014:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001016:	2b04      	cmp	r3, #4
 8001018:	d001      	beq.n	800101e <I2C_RequestMemoryWrite+0x4e>
      return HAL_TIMEOUT;
 800101a:	2003      	movs	r0, #3
 800101c:	e03f      	b.n	800109e <I2C_RequestMemoryWrite+0xce>
      return HAL_ERROR;
 800101e:	2001      	movs	r0, #1
 8001020:	e03d      	b.n	800109e <I2C_RequestMemoryWrite+0xce>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001022:	2300      	movs	r3, #0
 8001024:	9303      	str	r3, [sp, #12]
 8001026:	6823      	ldr	r3, [r4, #0]
 8001028:	695a      	ldr	r2, [r3, #20]
 800102a:	9203      	str	r2, [sp, #12]
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	9303      	str	r3, [sp, #12]
 8001030:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001032:	463a      	mov	r2, r7
 8001034:	4631      	mov	r1, r6
 8001036:	4620      	mov	r0, r4
 8001038:	f7ff ffa2 	bl	8000f80 <I2C_WaitOnTXEFlagUntilTimeout>
 800103c:	b158      	cbz	r0, 8001056 <I2C_RequestMemoryWrite+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800103e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001040:	2b04      	cmp	r3, #4
 8001042:	d001      	beq.n	8001048 <I2C_RequestMemoryWrite+0x78>
      return HAL_TIMEOUT;
 8001044:	2003      	movs	r0, #3
 8001046:	e02a      	b.n	800109e <I2C_RequestMemoryWrite+0xce>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001048:	6822      	ldr	r2, [r4, #0]
 800104a:	6813      	ldr	r3, [r2, #0]
 800104c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001050:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8001052:	2001      	movs	r0, #1
 8001054:	e023      	b.n	800109e <I2C_RequestMemoryWrite+0xce>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001056:	f1b8 0f01 	cmp.w	r8, #1
 800105a:	d104      	bne.n	8001066 <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800105c:	6823      	ldr	r3, [r4, #0]
 800105e:	fa5f f689 	uxtb.w	r6, r9
 8001062:	611e      	str	r6, [r3, #16]
 8001064:	e01b      	b.n	800109e <I2C_RequestMemoryWrite+0xce>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001066:	6823      	ldr	r3, [r4, #0]
 8001068:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800106c:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800106e:	463a      	mov	r2, r7
 8001070:	4631      	mov	r1, r6
 8001072:	4620      	mov	r0, r4
 8001074:	f7ff ff84 	bl	8000f80 <I2C_WaitOnTXEFlagUntilTimeout>
 8001078:	b158      	cbz	r0, 8001092 <I2C_RequestMemoryWrite+0xc2>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800107a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800107c:	2b04      	cmp	r3, #4
 800107e:	d001      	beq.n	8001084 <I2C_RequestMemoryWrite+0xb4>
        return HAL_TIMEOUT;
 8001080:	2003      	movs	r0, #3
 8001082:	e00c      	b.n	800109e <I2C_RequestMemoryWrite+0xce>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001084:	6822      	ldr	r2, [r4, #0]
 8001086:	6813      	ldr	r3, [r2, #0]
 8001088:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800108c:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 800108e:	2001      	movs	r0, #1
 8001090:	e005      	b.n	800109e <I2C_RequestMemoryWrite+0xce>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001092:	6823      	ldr	r3, [r4, #0]
 8001094:	fa5f f689 	uxtb.w	r6, r9
 8001098:	611e      	str	r6, [r3, #16]
 800109a:	e000      	b.n	800109e <I2C_RequestMemoryWrite+0xce>
    return HAL_TIMEOUT;
 800109c:	2003      	movs	r0, #3
}
 800109e:	b005      	add	sp, #20
 80010a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010a4:	00010002 	.word	0x00010002

080010a8 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80010a8:	b570      	push	{r4, r5, r6, lr}
 80010aa:	4604      	mov	r4, r0
 80010ac:	460d      	mov	r5, r1
 80010ae:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80010b0:	6823      	ldr	r3, [r4, #0]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	f013 0f04 	tst.w	r3, #4
 80010b8:	d119      	bne.n	80010ee <I2C_WaitOnBTFFlagUntilTimeout+0x46>
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80010ba:	4620      	mov	r0, r4
 80010bc:	f7ff fec6 	bl	8000e4c <I2C_IsAcknowledgeFailed>
 80010c0:	b9b8      	cbnz	r0, 80010f2 <I2C_WaitOnBTFFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 80010c2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80010c6:	d0f3      	beq.n	80010b0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80010c8:	b125      	cbz	r5, 80010d4 <I2C_WaitOnBTFFlagUntilTimeout+0x2c>
 80010ca:	f7ff fd61 	bl	8000b90 <HAL_GetTick>
 80010ce:	1b80      	subs	r0, r0, r6
 80010d0:	42a8      	cmp	r0, r5
 80010d2:	d9ed      	bls.n	80010b0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010d6:	f043 0320 	orr.w	r3, r3, #32
 80010da:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80010dc:	2300      	movs	r3, #0
 80010de:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80010e0:	2220      	movs	r2, #32
 80010e2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80010e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 80010ea:	2003      	movs	r0, #3
 80010ec:	e000      	b.n	80010f0 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
  return HAL_OK;
 80010ee:	2000      	movs	r0, #0
}
 80010f0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80010f2:	2001      	movs	r0, #1
 80010f4:	e7fc      	b.n	80010f0 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
	...

080010f8 <HAL_I2C_Init>:
  if(hi2c == NULL)
 80010f8:	2800      	cmp	r0, #0
 80010fa:	f000 8082 	beq.w	8001202 <HAL_I2C_Init+0x10a>
{
 80010fe:	b510      	push	{r4, lr}
 8001100:	4604      	mov	r4, r0
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001102:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001106:	2b00      	cmp	r3, #0
 8001108:	d041      	beq.n	800118e <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800110a:	2324      	movs	r3, #36	; 0x24
 800110c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001110:	6822      	ldr	r2, [r4, #0]
 8001112:	6813      	ldr	r3, [r2, #0]
 8001114:	f023 0301 	bic.w	r3, r3, #1
 8001118:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800111a:	f000 fc59 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
  freqrange = I2C_FREQRANGE(pclk1);
 800111e:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <HAL_I2C_Init+0x110>)
 8001120:	fba3 2300 	umull	r2, r3, r3, r0
 8001124:	0c9b      	lsrs	r3, r3, #18
  hi2c->Instance->CR2 = freqrange;
 8001126:	6822      	ldr	r2, [r4, #0]
 8001128:	6053      	str	r3, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800112a:	6861      	ldr	r1, [r4, #4]
 800112c:	4a37      	ldr	r2, [pc, #220]	; (800120c <HAL_I2C_Init+0x114>)
 800112e:	4291      	cmp	r1, r2
 8001130:	d832      	bhi.n	8001198 <HAL_I2C_Init+0xa0>
 8001132:	3301      	adds	r3, #1
 8001134:	6822      	ldr	r2, [r4, #0]
 8001136:	6213      	str	r3, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001138:	6863      	ldr	r3, [r4, #4]
 800113a:	4a34      	ldr	r2, [pc, #208]	; (800120c <HAL_I2C_Init+0x114>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d835      	bhi.n	80011ac <HAL_I2C_Init+0xb4>
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	fbb0 f0f3 	udiv	r0, r0, r3
 8001146:	f640 73fc 	movw	r3, #4092	; 0xffc
 800114a:	4218      	tst	r0, r3
 800114c:	d100      	bne.n	8001150 <HAL_I2C_Init+0x58>
 800114e:	2004      	movs	r0, #4
 8001150:	6823      	ldr	r3, [r4, #0]
 8001152:	61d8      	str	r0, [r3, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001154:	69e3      	ldr	r3, [r4, #28]
 8001156:	6a21      	ldr	r1, [r4, #32]
 8001158:	6822      	ldr	r2, [r4, #0]
 800115a:	430b      	orrs	r3, r1
 800115c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800115e:	6923      	ldr	r3, [r4, #16]
 8001160:	68e1      	ldr	r1, [r4, #12]
 8001162:	6822      	ldr	r2, [r4, #0]
 8001164:	430b      	orrs	r3, r1
 8001166:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001168:	6963      	ldr	r3, [r4, #20]
 800116a:	69a1      	ldr	r1, [r4, #24]
 800116c:	6822      	ldr	r2, [r4, #0]
 800116e:	430b      	orrs	r3, r1
 8001170:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001172:	6822      	ldr	r2, [r4, #0]
 8001174:	6813      	ldr	r3, [r2, #0]
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800117c:	2000      	movs	r0, #0
 800117e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001180:	2320      	movs	r3, #32
 8001182:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001186:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001188:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 800118c:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800118e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001192:	f7ff f9f1 	bl	8000578 <HAL_I2C_MspInit>
 8001196:	e7b8      	b.n	800110a <HAL_I2C_Init+0x12>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001198:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800119c:	fb02 f303 	mul.w	r3, r2, r3
 80011a0:	4a1b      	ldr	r2, [pc, #108]	; (8001210 <HAL_I2C_Init+0x118>)
 80011a2:	fba2 2303 	umull	r2, r3, r2, r3
 80011a6:	099b      	lsrs	r3, r3, #6
 80011a8:	3301      	adds	r3, #1
 80011aa:	e7c3      	b.n	8001134 <HAL_I2C_Init+0x3c>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80011ac:	68a1      	ldr	r1, [r4, #8]
 80011ae:	b989      	cbnz	r1, 80011d4 <HAL_I2C_Init+0xdc>
 80011b0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80011b4:	fbb0 f2f2 	udiv	r2, r0, r2
 80011b8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80011bc:	fab2 f282 	clz	r2, r2
 80011c0:	0952      	lsrs	r2, r2, #5
 80011c2:	b9e2      	cbnz	r2, 80011fe <HAL_I2C_Init+0x106>
 80011c4:	b991      	cbnz	r1, 80011ec <HAL_I2C_Init+0xf4>
 80011c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80011ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80011ce:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80011d2:	e7bd      	b.n	8001150 <HAL_I2C_Init+0x58>
 80011d4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80011d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80011dc:	fbb0 f2f2 	udiv	r2, r0, r2
 80011e0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80011e4:	fab2 f282 	clz	r2, r2
 80011e8:	0952      	lsrs	r2, r2, #5
 80011ea:	e7ea      	b.n	80011c2 <HAL_I2C_Init+0xca>
 80011ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80011f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80011f8:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80011fc:	e7a8      	b.n	8001150 <HAL_I2C_Init+0x58>
 80011fe:	2001      	movs	r0, #1
 8001200:	e7a6      	b.n	8001150 <HAL_I2C_Init+0x58>
    return HAL_ERROR;
 8001202:	2001      	movs	r0, #1
}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	431bde83 	.word	0x431bde83
 800120c:	000186a0 	.word	0x000186a0
 8001210:	10624dd3 	.word	0x10624dd3

08001214 <HAL_I2C_Mem_Write>:
{
 8001214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001218:	b083      	sub	sp, #12
 800121a:	4604      	mov	r4, r0
 800121c:	460f      	mov	r7, r1
 800121e:	4690      	mov	r8, r2
 8001220:	4699      	mov	r9, r3
 8001222:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8001224:	f7ff fcb4 	bl	8000b90 <HAL_GetTick>
 8001228:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800122a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800122e:	b2c0      	uxtb	r0, r0
 8001230:	2820      	cmp	r0, #32
 8001232:	d003      	beq.n	800123c <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8001234:	2002      	movs	r0, #2
}
 8001236:	b003      	add	sp, #12
 8001238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800123c:	9500      	str	r5, [sp, #0]
 800123e:	2319      	movs	r3, #25
 8001240:	2201      	movs	r2, #1
 8001242:	4951      	ldr	r1, [pc, #324]	; (8001388 <HAL_I2C_Mem_Write+0x174>)
 8001244:	4620      	mov	r0, r4
 8001246:	f7ff fe16 	bl	8000e76 <I2C_WaitOnFlagUntilTimeout>
 800124a:	2800      	cmp	r0, #0
 800124c:	f040 8097 	bne.w	800137e <HAL_I2C_Mem_Write+0x16a>
    __HAL_LOCK(hi2c);
 8001250:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001254:	2b01      	cmp	r3, #1
 8001256:	f000 8094 	beq.w	8001382 <HAL_I2C_Mem_Write+0x16e>
 800125a:	2301      	movs	r3, #1
 800125c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001260:	6823      	ldr	r3, [r4, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	f012 0f01 	tst.w	r2, #1
 8001268:	d103      	bne.n	8001272 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	f042 0201 	orr.w	r2, r2, #1
 8001270:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001272:	6822      	ldr	r2, [r4, #0]
 8001274:	6813      	ldr	r3, [r2, #0]
 8001276:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800127a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800127c:	2321      	movs	r3, #33	; 0x21
 800127e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001282:	2340      	movs	r3, #64	; 0x40
 8001284:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001288:	2300      	movs	r3, #0
 800128a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800128c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800128e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001290:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8001294:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001296:	4b3d      	ldr	r3, [pc, #244]	; (800138c <HAL_I2C_Mem_Write+0x178>)
 8001298:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800129a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800129c:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800129e:	9501      	str	r5, [sp, #4]
 80012a0:	9600      	str	r6, [sp, #0]
 80012a2:	464b      	mov	r3, r9
 80012a4:	4642      	mov	r2, r8
 80012a6:	4639      	mov	r1, r7
 80012a8:	4620      	mov	r0, r4
 80012aa:	f7ff fe91 	bl	8000fd0 <I2C_RequestMemoryWrite>
 80012ae:	b1c0      	cbz	r0, 80012e2 <HAL_I2C_Mem_Write+0xce>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d004      	beq.n	80012c0 <HAL_I2C_Mem_Write+0xac>
        __HAL_UNLOCK(hi2c);
 80012b6:	2300      	movs	r3, #0
 80012b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 80012bc:	2003      	movs	r0, #3
 80012be:	e7ba      	b.n	8001236 <HAL_I2C_Mem_Write+0x22>
        __HAL_UNLOCK(hi2c);
 80012c0:	2300      	movs	r3, #0
 80012c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80012c6:	2001      	movs	r0, #1
 80012c8:	e7b5      	b.n	8001236 <HAL_I2C_Mem_Write+0x22>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	d001      	beq.n	80012d4 <HAL_I2C_Mem_Write+0xc0>
          return HAL_TIMEOUT;
 80012d0:	2003      	movs	r0, #3
 80012d2:	e7b0      	b.n	8001236 <HAL_I2C_Mem_Write+0x22>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80012d4:	6822      	ldr	r2, [r4, #0]
 80012d6:	6813      	ldr	r3, [r2, #0]
 80012d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012dc:	6013      	str	r3, [r2, #0]
          return HAL_ERROR;
 80012de:	2001      	movs	r0, #1
 80012e0:	e7a9      	b.n	8001236 <HAL_I2C_Mem_Write+0x22>
    while(hi2c->XferSize > 0U)
 80012e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d02a      	beq.n	800133e <HAL_I2C_Mem_Write+0x12a>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012e8:	462a      	mov	r2, r5
 80012ea:	4631      	mov	r1, r6
 80012ec:	4620      	mov	r0, r4
 80012ee:	f7ff fe47 	bl	8000f80 <I2C_WaitOnTXEFlagUntilTimeout>
 80012f2:	2800      	cmp	r0, #0
 80012f4:	d1e9      	bne.n	80012ca <HAL_I2C_Mem_Write+0xb6>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80012f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	6262      	str	r2, [r4, #36]	; 0x24
 80012fc:	6822      	ldr	r2, [r4, #0]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	6113      	str	r3, [r2, #16]
      hi2c->XferSize--;
 8001302:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8001304:	3901      	subs	r1, #1
 8001306:	b289      	uxth	r1, r1
 8001308:	8521      	strh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800130a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800130c:	b29b      	uxth	r3, r3
 800130e:	3b01      	subs	r3, #1
 8001310:	b29b      	uxth	r3, r3
 8001312:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001314:	6823      	ldr	r3, [r4, #0]
 8001316:	695a      	ldr	r2, [r3, #20]
 8001318:	f012 0f04 	tst.w	r2, #4
 800131c:	d0e1      	beq.n	80012e2 <HAL_I2C_Mem_Write+0xce>
 800131e:	2900      	cmp	r1, #0
 8001320:	d0df      	beq.n	80012e2 <HAL_I2C_Mem_Write+0xce>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001322:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001324:	1c51      	adds	r1, r2, #1
 8001326:	6261      	str	r1, [r4, #36]	; 0x24
 8001328:	7812      	ldrb	r2, [r2, #0]
 800132a:	611a      	str	r2, [r3, #16]
        hi2c->XferSize--;
 800132c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800132e:	3b01      	subs	r3, #1
 8001330:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001332:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001334:	b29b      	uxth	r3, r3
 8001336:	3b01      	subs	r3, #1
 8001338:	b29b      	uxth	r3, r3
 800133a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800133c:	e7d1      	b.n	80012e2 <HAL_I2C_Mem_Write+0xce>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800133e:	462a      	mov	r2, r5
 8001340:	4631      	mov	r1, r6
 8001342:	4620      	mov	r0, r4
 8001344:	f7ff feb0 	bl	80010a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001348:	b158      	cbz	r0, 8001362 <HAL_I2C_Mem_Write+0x14e>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800134a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800134c:	2b04      	cmp	r3, #4
 800134e:	d001      	beq.n	8001354 <HAL_I2C_Mem_Write+0x140>
        return HAL_TIMEOUT;
 8001350:	2003      	movs	r0, #3
 8001352:	e770      	b.n	8001236 <HAL_I2C_Mem_Write+0x22>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001354:	6822      	ldr	r2, [r4, #0]
 8001356:	6813      	ldr	r3, [r2, #0]
 8001358:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800135c:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 800135e:	2001      	movs	r0, #1
 8001360:	e769      	b.n	8001236 <HAL_I2C_Mem_Write+0x22>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001362:	6822      	ldr	r2, [r4, #0]
 8001364:	6813      	ldr	r3, [r2, #0]
 8001366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800136c:	2320      	movs	r3, #32
 800136e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001372:	2300      	movs	r3, #0
 8001374:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001378:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800137c:	e75b      	b.n	8001236 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 800137e:	2002      	movs	r0, #2
 8001380:	e759      	b.n	8001236 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8001382:	2002      	movs	r0, #2
 8001384:	e757      	b.n	8001236 <HAL_I2C_Mem_Write+0x22>
 8001386:	bf00      	nop
 8001388:	00100002 	.word	0x00100002
 800138c:	ffff0000 	.word	0xffff0000

08001390 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001390:	2800      	cmp	r0, #0
 8001392:	f000 81ba 	beq.w	800170a <HAL_RCC_OscConfig+0x37a>
{
 8001396:	b570      	push	{r4, r5, r6, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139c:	6803      	ldr	r3, [r0, #0]
 800139e:	f013 0f01 	tst.w	r3, #1
 80013a2:	d03b      	beq.n	800141c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013a4:	4b9f      	ldr	r3, [pc, #636]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 030c 	and.w	r3, r3, #12
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d02c      	beq.n	800140a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b0:	4b9c      	ldr	r3, [pc, #624]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013b8:	2b08      	cmp	r3, #8
 80013ba:	d021      	beq.n	8001400 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013bc:	6863      	ldr	r3, [r4, #4]
 80013be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c2:	d04f      	beq.n	8001464 <HAL_RCC_OscConfig+0xd4>
 80013c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c8:	d052      	beq.n	8001470 <HAL_RCC_OscConfig+0xe0>
 80013ca:	4b96      	ldr	r3, [pc, #600]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013da:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013dc:	6863      	ldr	r3, [r4, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d050      	beq.n	8001484 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e2:	f7ff fbd5 	bl	8000b90 <HAL_GetTick>
 80013e6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e8:	4b8e      	ldr	r3, [pc, #568]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80013f0:	d114      	bne.n	800141c <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f2:	f7ff fbcd 	bl	8000b90 <HAL_GetTick>
 80013f6:	1b40      	subs	r0, r0, r5
 80013f8:	2864      	cmp	r0, #100	; 0x64
 80013fa:	d9f5      	bls.n	80013e8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80013fc:	2003      	movs	r0, #3
 80013fe:	e18b      	b.n	8001718 <HAL_RCC_OscConfig+0x388>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001400:	4b88      	ldr	r3, [pc, #544]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001408:	d0d8      	beq.n	80013bc <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140a:	4b86      	ldr	r3, [pc, #536]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001412:	d003      	beq.n	800141c <HAL_RCC_OscConfig+0x8c>
 8001414:	6863      	ldr	r3, [r4, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 8179 	beq.w	800170e <HAL_RCC_OscConfig+0x37e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800141c:	6823      	ldr	r3, [r4, #0]
 800141e:	f013 0f02 	tst.w	r3, #2
 8001422:	d054      	beq.n	80014ce <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001424:	4b7f      	ldr	r3, [pc, #508]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f013 0f0c 	tst.w	r3, #12
 800142c:	d03e      	beq.n	80014ac <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800142e:	4b7d      	ldr	r3, [pc, #500]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001436:	2b08      	cmp	r3, #8
 8001438:	d033      	beq.n	80014a2 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800143a:	68e3      	ldr	r3, [r4, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d068      	beq.n	8001512 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001440:	4b79      	ldr	r3, [pc, #484]	; (8001628 <HAL_RCC_OscConfig+0x298>)
 8001442:	2201      	movs	r2, #1
 8001444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001446:	f7ff fba3 	bl	8000b90 <HAL_GetTick>
 800144a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	4b75      	ldr	r3, [pc, #468]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f013 0f02 	tst.w	r3, #2
 8001454:	d154      	bne.n	8001500 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001456:	f7ff fb9b 	bl	8000b90 <HAL_GetTick>
 800145a:	1b40      	subs	r0, r0, r5
 800145c:	2802      	cmp	r0, #2
 800145e:	d9f5      	bls.n	800144c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001460:	2003      	movs	r0, #3
 8001462:	e159      	b.n	8001718 <HAL_RCC_OscConfig+0x388>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001464:	4a6f      	ldr	r2, [pc, #444]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 8001466:	6813      	ldr	r3, [r2, #0]
 8001468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e7b5      	b.n	80013dc <HAL_RCC_OscConfig+0x4c>
 8001470:	4b6c      	ldr	r3, [pc, #432]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	e7ab      	b.n	80013dc <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001484:	f7ff fb84 	bl	8000b90 <HAL_GetTick>
 8001488:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148a:	4b66      	ldr	r3, [pc, #408]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001492:	d0c3      	beq.n	800141c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001494:	f7ff fb7c 	bl	8000b90 <HAL_GetTick>
 8001498:	1b40      	subs	r0, r0, r5
 800149a:	2864      	cmp	r0, #100	; 0x64
 800149c:	d9f5      	bls.n	800148a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800149e:	2003      	movs	r0, #3
 80014a0:	e13a      	b.n	8001718 <HAL_RCC_OscConfig+0x388>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a2:	4b60      	ldr	r3, [pc, #384]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80014aa:	d1c6      	bne.n	800143a <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ac:	4b5d      	ldr	r3, [pc, #372]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f013 0f02 	tst.w	r3, #2
 80014b4:	d003      	beq.n	80014be <HAL_RCC_OscConfig+0x12e>
 80014b6:	68e3      	ldr	r3, [r4, #12]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	f040 812a 	bne.w	8001712 <HAL_RCC_OscConfig+0x382>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014be:	4a59      	ldr	r2, [pc, #356]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 80014c0:	6813      	ldr	r3, [r2, #0]
 80014c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80014c6:	6921      	ldr	r1, [r4, #16]
 80014c8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014cc:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ce:	6823      	ldr	r3, [r4, #0]
 80014d0:	f013 0f08 	tst.w	r3, #8
 80014d4:	d042      	beq.n	800155c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014d6:	6963      	ldr	r3, [r4, #20]
 80014d8:	b36b      	cbz	r3, 8001536 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014da:	4b53      	ldr	r3, [pc, #332]	; (8001628 <HAL_RCC_OscConfig+0x298>)
 80014dc:	2201      	movs	r2, #1
 80014de:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e2:	f7ff fb55 	bl	8000b90 <HAL_GetTick>
 80014e6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e8:	4b4e      	ldr	r3, [pc, #312]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 80014ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ec:	f013 0f02 	tst.w	r3, #2
 80014f0:	d134      	bne.n	800155c <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f2:	f7ff fb4d 	bl	8000b90 <HAL_GetTick>
 80014f6:	1b40      	subs	r0, r0, r5
 80014f8:	2802      	cmp	r0, #2
 80014fa:	d9f5      	bls.n	80014e8 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80014fc:	2003      	movs	r0, #3
 80014fe:	e10b      	b.n	8001718 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001500:	4a48      	ldr	r2, [pc, #288]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 8001502:	6813      	ldr	r3, [r2, #0]
 8001504:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001508:	6921      	ldr	r1, [r4, #16]
 800150a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	e7dd      	b.n	80014ce <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001512:	4b45      	ldr	r3, [pc, #276]	; (8001628 <HAL_RCC_OscConfig+0x298>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001518:	f7ff fb3a 	bl	8000b90 <HAL_GetTick>
 800151c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151e:	4b41      	ldr	r3, [pc, #260]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f013 0f02 	tst.w	r3, #2
 8001526:	d0d2      	beq.n	80014ce <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001528:	f7ff fb32 	bl	8000b90 <HAL_GetTick>
 800152c:	1b40      	subs	r0, r0, r5
 800152e:	2802      	cmp	r0, #2
 8001530:	d9f5      	bls.n	800151e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001532:	2003      	movs	r0, #3
 8001534:	e0f0      	b.n	8001718 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001536:	4b3c      	ldr	r3, [pc, #240]	; (8001628 <HAL_RCC_OscConfig+0x298>)
 8001538:	2200      	movs	r2, #0
 800153a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153e:	f7ff fb27 	bl	8000b90 <HAL_GetTick>
 8001542:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001544:	4b37      	ldr	r3, [pc, #220]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 8001546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001548:	f013 0f02 	tst.w	r3, #2
 800154c:	d006      	beq.n	800155c <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800154e:	f7ff fb1f 	bl	8000b90 <HAL_GetTick>
 8001552:	1b40      	subs	r0, r0, r5
 8001554:	2802      	cmp	r0, #2
 8001556:	d9f5      	bls.n	8001544 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001558:	2003      	movs	r0, #3
 800155a:	e0dd      	b.n	8001718 <HAL_RCC_OscConfig+0x388>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800155c:	6823      	ldr	r3, [r4, #0]
 800155e:	f013 0f04 	tst.w	r3, #4
 8001562:	d077      	beq.n	8001654 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001564:	4b2f      	ldr	r3, [pc, #188]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800156c:	d133      	bne.n	80015d6 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	4b2c      	ldr	r3, [pc, #176]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 8001574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001576:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800157a:	641a      	str	r2, [r3, #64]	; 0x40
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001586:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001588:	4b28      	ldr	r3, [pc, #160]	; (800162c <HAL_RCC_OscConfig+0x29c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001590:	d023      	beq.n	80015da <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001592:	68a3      	ldr	r3, [r4, #8]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d034      	beq.n	8001602 <HAL_RCC_OscConfig+0x272>
 8001598:	2b05      	cmp	r3, #5
 800159a:	d038      	beq.n	800160e <HAL_RCC_OscConfig+0x27e>
 800159c:	4b21      	ldr	r3, [pc, #132]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 800159e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80015a0:	f022 0201 	bic.w	r2, r2, #1
 80015a4:	671a      	str	r2, [r3, #112]	; 0x70
 80015a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80015a8:	f022 0204 	bic.w	r2, r2, #4
 80015ac:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ae:	68a3      	ldr	r3, [r4, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d03d      	beq.n	8001630 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b4:	f7ff faec 	bl	8000b90 <HAL_GetTick>
 80015b8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015be:	f013 0f02 	tst.w	r3, #2
 80015c2:	d146      	bne.n	8001652 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c4:	f7ff fae4 	bl	8000b90 <HAL_GetTick>
 80015c8:	1b80      	subs	r0, r0, r6
 80015ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80015ce:	4298      	cmp	r0, r3
 80015d0:	d9f3      	bls.n	80015ba <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80015d2:	2003      	movs	r0, #3
 80015d4:	e0a0      	b.n	8001718 <HAL_RCC_OscConfig+0x388>
    FlagStatus       pwrclkchanged = RESET;
 80015d6:	2500      	movs	r5, #0
 80015d8:	e7d6      	b.n	8001588 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015da:	4a14      	ldr	r2, [pc, #80]	; (800162c <HAL_RCC_OscConfig+0x29c>)
 80015dc:	6813      	ldr	r3, [r2, #0]
 80015de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80015e4:	f7ff fad4 	bl	8000b90 <HAL_GetTick>
 80015e8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_RCC_OscConfig+0x29c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f413 7f80 	tst.w	r3, #256	; 0x100
 80015f2:	d1ce      	bne.n	8001592 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f4:	f7ff facc 	bl	8000b90 <HAL_GetTick>
 80015f8:	1b80      	subs	r0, r0, r6
 80015fa:	2802      	cmp	r0, #2
 80015fc:	d9f5      	bls.n	80015ea <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80015fe:	2003      	movs	r0, #3
 8001600:	e08a      	b.n	8001718 <HAL_RCC_OscConfig+0x388>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001602:	4a08      	ldr	r2, [pc, #32]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 8001604:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6713      	str	r3, [r2, #112]	; 0x70
 800160c:	e7cf      	b.n	80015ae <HAL_RCC_OscConfig+0x21e>
 800160e:	4b05      	ldr	r3, [pc, #20]	; (8001624 <HAL_RCC_OscConfig+0x294>)
 8001610:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001612:	f042 0204 	orr.w	r2, r2, #4
 8001616:	671a      	str	r2, [r3, #112]	; 0x70
 8001618:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800161a:	f042 0201 	orr.w	r2, r2, #1
 800161e:	671a      	str	r2, [r3, #112]	; 0x70
 8001620:	e7c5      	b.n	80015ae <HAL_RCC_OscConfig+0x21e>
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800
 8001628:	42470000 	.word	0x42470000
 800162c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001630:	f7ff faae 	bl	8000b90 <HAL_GetTick>
 8001634:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001636:	4b3a      	ldr	r3, [pc, #232]	; (8001720 <HAL_RCC_OscConfig+0x390>)
 8001638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163a:	f013 0f02 	tst.w	r3, #2
 800163e:	d008      	beq.n	8001652 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001640:	f7ff faa6 	bl	8000b90 <HAL_GetTick>
 8001644:	1b80      	subs	r0, r0, r6
 8001646:	f241 3388 	movw	r3, #5000	; 0x1388
 800164a:	4298      	cmp	r0, r3
 800164c:	d9f3      	bls.n	8001636 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800164e:	2003      	movs	r0, #3
 8001650:	e062      	b.n	8001718 <HAL_RCC_OscConfig+0x388>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001652:	b9e5      	cbnz	r5, 800168e <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001654:	69a3      	ldr	r3, [r4, #24]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d05d      	beq.n	8001716 <HAL_RCC_OscConfig+0x386>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800165a:	4a31      	ldr	r2, [pc, #196]	; (8001720 <HAL_RCC_OscConfig+0x390>)
 800165c:	6892      	ldr	r2, [r2, #8]
 800165e:	f002 020c 	and.w	r2, r2, #12
 8001662:	2a08      	cmp	r2, #8
 8001664:	d05a      	beq.n	800171c <HAL_RCC_OscConfig+0x38c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001666:	2b02      	cmp	r3, #2
 8001668:	d017      	beq.n	800169a <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <HAL_RCC_OscConfig+0x394>)
 800166c:	2200      	movs	r2, #0
 800166e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fa8e 	bl	8000b90 <HAL_GetTick>
 8001674:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001676:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <HAL_RCC_OscConfig+0x390>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800167e:	d042      	beq.n	8001706 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff fa86 	bl	8000b90 <HAL_GetTick>
 8001684:	1b00      	subs	r0, r0, r4
 8001686:	2802      	cmp	r0, #2
 8001688:	d9f5      	bls.n	8001676 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800168a:	2003      	movs	r0, #3
 800168c:	e044      	b.n	8001718 <HAL_RCC_OscConfig+0x388>
      __HAL_RCC_PWR_CLK_DISABLE();
 800168e:	4a24      	ldr	r2, [pc, #144]	; (8001720 <HAL_RCC_OscConfig+0x390>)
 8001690:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001696:	6413      	str	r3, [r2, #64]	; 0x40
 8001698:	e7dc      	b.n	8001654 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 800169a:	4b22      	ldr	r3, [pc, #136]	; (8001724 <HAL_RCC_OscConfig+0x394>)
 800169c:	2200      	movs	r2, #0
 800169e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80016a0:	f7ff fa76 	bl	8000b90 <HAL_GetTick>
 80016a4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a6:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <HAL_RCC_OscConfig+0x390>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80016ae:	d006      	beq.n	80016be <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b0:	f7ff fa6e 	bl	8000b90 <HAL_GetTick>
 80016b4:	1b40      	subs	r0, r0, r5
 80016b6:	2802      	cmp	r0, #2
 80016b8:	d9f5      	bls.n	80016a6 <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 80016ba:	2003      	movs	r0, #3
 80016bc:	e02c      	b.n	8001718 <HAL_RCC_OscConfig+0x388>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016be:	69e3      	ldr	r3, [r4, #28]
 80016c0:	6a22      	ldr	r2, [r4, #32]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016c6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80016ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80016cc:	0852      	lsrs	r2, r2, #1
 80016ce:	3a01      	subs	r2, #1
 80016d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80016d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80016d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80016da:	4a11      	ldr	r2, [pc, #68]	; (8001720 <HAL_RCC_OscConfig+0x390>)
 80016dc:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_RCC_OscConfig+0x394>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80016e4:	f7ff fa54 	bl	8000b90 <HAL_GetTick>
 80016e8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <HAL_RCC_OscConfig+0x390>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80016f2:	d106      	bne.n	8001702 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f4:	f7ff fa4c 	bl	8000b90 <HAL_GetTick>
 80016f8:	1b00      	subs	r0, r0, r4
 80016fa:	2802      	cmp	r0, #2
 80016fc:	d9f5      	bls.n	80016ea <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80016fe:	2003      	movs	r0, #3
 8001700:	e00a      	b.n	8001718 <HAL_RCC_OscConfig+0x388>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001702:	2000      	movs	r0, #0
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x388>
 8001706:	2000      	movs	r0, #0
 8001708:	e006      	b.n	8001718 <HAL_RCC_OscConfig+0x388>
    return HAL_ERROR;
 800170a:	2001      	movs	r0, #1
}
 800170c:	4770      	bx	lr
        return HAL_ERROR;
 800170e:	2001      	movs	r0, #1
 8001710:	e002      	b.n	8001718 <HAL_RCC_OscConfig+0x388>
        return HAL_ERROR;
 8001712:	2001      	movs	r0, #1
 8001714:	e000      	b.n	8001718 <HAL_RCC_OscConfig+0x388>
  return HAL_OK;
 8001716:	2000      	movs	r0, #0
}
 8001718:	b002      	add	sp, #8
 800171a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800171c:	2001      	movs	r0, #1
 800171e:	e7fb      	b.n	8001718 <HAL_RCC_OscConfig+0x388>
 8001720:	40023800 	.word	0x40023800
 8001724:	42470000 	.word	0x42470000

08001728 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001728:	b570      	push	{r4, r5, r6, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	460c      	mov	r4, r1
 800172e:	4615      	mov	r5, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8001730:	bb00      	cbnz	r0, 8001774 <HAL_RCC_MCOConfig+0x4c>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	4e20      	ldr	r6, [pc, #128]	; (80017b8 <HAL_RCC_MCOConfig+0x90>)
 8001738:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	6332      	str	r2, [r6, #48]	; 0x30
 8001740:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8001742:	f002 0201 	and.w	r2, r2, #1
 8001746:	9201      	str	r2, [sp, #4]
 8001748:	9a01      	ldr	r2, [sp, #4]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800174a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800174e:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2202      	movs	r2, #2
 8001752:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001754:	2203      	movs	r2, #3
 8001756:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800175a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800175c:	a903      	add	r1, sp, #12
 800175e:	4817      	ldr	r0, [pc, #92]	; (80017bc <HAL_RCC_MCOConfig+0x94>)
 8001760:	f7ff fa8e 	bl	8000c80 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001764:	68b3      	ldr	r3, [r6, #8]
 8001766:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 800176a:	4325      	orrs	r5, r4
 800176c:	431d      	orrs	r5, r3
 800176e:	60b5      	str	r5, [r6, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8001770:	b008      	add	sp, #32
 8001772:	bd70      	pop	{r4, r5, r6, pc}
    __MCO2_CLK_ENABLE();
 8001774:	2300      	movs	r3, #0
 8001776:	9302      	str	r3, [sp, #8]
 8001778:	4e0f      	ldr	r6, [pc, #60]	; (80017b8 <HAL_RCC_MCOConfig+0x90>)
 800177a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800177c:	f042 0204 	orr.w	r2, r2, #4
 8001780:	6332      	str	r2, [r6, #48]	; 0x30
 8001782:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8001784:	f002 0204 	and.w	r2, r2, #4
 8001788:	9202      	str	r2, [sp, #8]
 800178a:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800178c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001790:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2202      	movs	r2, #2
 8001794:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	2203      	movs	r2, #3
 8001798:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800179c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800179e:	a903      	add	r1, sp, #12
 80017a0:	4807      	ldr	r0, [pc, #28]	; (80017c0 <HAL_RCC_MCOConfig+0x98>)
 80017a2:	f7ff fa6d 	bl	8000c80 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80017a6:	68b3      	ldr	r3, [r6, #8]
 80017a8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80017ac:	ea44 04c5 	orr.w	r4, r4, r5, lsl #3
 80017b0:	431c      	orrs	r4, r3
 80017b2:	60b4      	str	r4, [r6, #8]
}
 80017b4:	e7dc      	b.n	8001770 <HAL_RCC_MCOConfig+0x48>
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020000 	.word	0x40020000
 80017c0:	40020800 	.word	0x40020800

080017c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c4:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017c6:	4b25      	ldr	r3, [pc, #148]	; (800185c <HAL_RCC_GetSysClockFreq+0x98>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d03f      	beq.n	8001852 <HAL_RCC_GetSysClockFreq+0x8e>
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d13f      	bne.n	8001856 <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017d6:	4b21      	ldr	r3, [pc, #132]	; (800185c <HAL_RCC_GetSysClockFreq+0x98>)
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80017e4:	d012      	beq.n	800180c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <HAL_RCC_GetSysClockFreq+0x98>)
 80017e8:	6859      	ldr	r1, [r3, #4]
 80017ea:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80017ee:	481c      	ldr	r0, [pc, #112]	; (8001860 <HAL_RCC_GetSysClockFreq+0x9c>)
 80017f0:	2300      	movs	r3, #0
 80017f2:	fba1 0100 	umull	r0, r1, r1, r0
 80017f6:	f7fe fce7 	bl	80001c8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_RCC_GetSysClockFreq+0x98>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001802:	3301      	adds	r3, #1
 8001804:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001806:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800180a:	e025      	b.n	8001858 <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <HAL_RCC_GetSysClockFreq+0x98>)
 800180e:	6859      	ldr	r1, [r3, #4]
 8001810:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8001814:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8001818:	ebb1 000c 	subs.w	r0, r1, ip
 800181c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001820:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001824:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001828:	0181      	lsls	r1, r0, #6
 800182a:	1a09      	subs	r1, r1, r0
 800182c:	eb63 030e 	sbc.w	r3, r3, lr
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001836:	00c9      	lsls	r1, r1, #3
 8001838:	eb11 0c0c 	adds.w	ip, r1, ip
 800183c:	f143 0300 	adc.w	r3, r3, #0
 8001840:	0299      	lsls	r1, r3, #10
 8001842:	2300      	movs	r3, #0
 8001844:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001848:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800184c:	f7fe fcbc 	bl	80001c8 <__aeabi_uldivmod>
 8001850:	e7d3      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001852:	4803      	ldr	r0, [pc, #12]	; (8001860 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001854:	e000      	b.n	8001858 <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001856:	4803      	ldr	r0, [pc, #12]	; (8001864 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001858:	bd08      	pop	{r3, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	017d7840 	.word	0x017d7840
 8001864:	00f42400 	.word	0x00f42400

08001868 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001868:	2800      	cmp	r0, #0
 800186a:	f000 809a 	beq.w	80019a2 <HAL_RCC_ClockConfig+0x13a>
{
 800186e:	b570      	push	{r4, r5, r6, lr}
 8001870:	460d      	mov	r5, r1
 8001872:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001874:	4b4f      	ldr	r3, [pc, #316]	; (80019b4 <HAL_RCC_ClockConfig+0x14c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	428b      	cmp	r3, r1
 800187e:	d208      	bcs.n	8001892 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001880:	b2cb      	uxtb	r3, r1
 8001882:	4a4c      	ldr	r2, [pc, #304]	; (80019b4 <HAL_RCC_ClockConfig+0x14c>)
 8001884:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	6813      	ldr	r3, [r2, #0]
 8001888:	f003 030f 	and.w	r3, r3, #15
 800188c:	428b      	cmp	r3, r1
 800188e:	f040 808a 	bne.w	80019a6 <HAL_RCC_ClockConfig+0x13e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001892:	6823      	ldr	r3, [r4, #0]
 8001894:	f013 0f02 	tst.w	r3, #2
 8001898:	d017      	beq.n	80018ca <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189a:	f013 0f04 	tst.w	r3, #4
 800189e:	d004      	beq.n	80018aa <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a0:	4a45      	ldr	r2, [pc, #276]	; (80019b8 <HAL_RCC_ClockConfig+0x150>)
 80018a2:	6893      	ldr	r3, [r2, #8]
 80018a4:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018a8:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018aa:	6823      	ldr	r3, [r4, #0]
 80018ac:	f013 0f08 	tst.w	r3, #8
 80018b0:	d004      	beq.n	80018bc <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b2:	4a41      	ldr	r2, [pc, #260]	; (80019b8 <HAL_RCC_ClockConfig+0x150>)
 80018b4:	6893      	ldr	r3, [r2, #8]
 80018b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018ba:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018bc:	4a3e      	ldr	r2, [pc, #248]	; (80019b8 <HAL_RCC_ClockConfig+0x150>)
 80018be:	6893      	ldr	r3, [r2, #8]
 80018c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018c4:	68a1      	ldr	r1, [r4, #8]
 80018c6:	430b      	orrs	r3, r1
 80018c8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ca:	6823      	ldr	r3, [r4, #0]
 80018cc:	f013 0f01 	tst.w	r3, #1
 80018d0:	d032      	beq.n	8001938 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d2:	6863      	ldr	r3, [r4, #4]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d021      	beq.n	800191c <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d8:	1e9a      	subs	r2, r3, #2
 80018da:	2a01      	cmp	r2, #1
 80018dc:	d925      	bls.n	800192a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018de:	4a36      	ldr	r2, [pc, #216]	; (80019b8 <HAL_RCC_ClockConfig+0x150>)
 80018e0:	6812      	ldr	r2, [r2, #0]
 80018e2:	f012 0f02 	tst.w	r2, #2
 80018e6:	d060      	beq.n	80019aa <HAL_RCC_ClockConfig+0x142>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018e8:	4933      	ldr	r1, [pc, #204]	; (80019b8 <HAL_RCC_ClockConfig+0x150>)
 80018ea:	688a      	ldr	r2, [r1, #8]
 80018ec:	f022 0203 	bic.w	r2, r2, #3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80018f4:	f7ff f94c 	bl	8000b90 <HAL_GetTick>
 80018f8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fa:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <HAL_RCC_ClockConfig+0x150>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	6862      	ldr	r2, [r4, #4]
 8001904:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001908:	d016      	beq.n	8001938 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190a:	f7ff f941 	bl	8000b90 <HAL_GetTick>
 800190e:	1b80      	subs	r0, r0, r6
 8001910:	f241 3388 	movw	r3, #5000	; 0x1388
 8001914:	4298      	cmp	r0, r3
 8001916:	d9f0      	bls.n	80018fa <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001918:	2003      	movs	r0, #3
 800191a:	e041      	b.n	80019a0 <HAL_RCC_ClockConfig+0x138>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191c:	4a26      	ldr	r2, [pc, #152]	; (80019b8 <HAL_RCC_ClockConfig+0x150>)
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001924:	d1e0      	bne.n	80018e8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001926:	2001      	movs	r0, #1
 8001928:	e03a      	b.n	80019a0 <HAL_RCC_ClockConfig+0x138>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192a:	4a23      	ldr	r2, [pc, #140]	; (80019b8 <HAL_RCC_ClockConfig+0x150>)
 800192c:	6812      	ldr	r2, [r2, #0]
 800192e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001932:	d1d9      	bne.n	80018e8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001934:	2001      	movs	r0, #1
 8001936:	e033      	b.n	80019a0 <HAL_RCC_ClockConfig+0x138>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001938:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <HAL_RCC_ClockConfig+0x14c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 030f 	and.w	r3, r3, #15
 8001940:	42ab      	cmp	r3, r5
 8001942:	d907      	bls.n	8001954 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001944:	b2ea      	uxtb	r2, r5
 8001946:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_RCC_ClockConfig+0x14c>)
 8001948:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 030f 	and.w	r3, r3, #15
 8001950:	42ab      	cmp	r3, r5
 8001952:	d12c      	bne.n	80019ae <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001954:	6823      	ldr	r3, [r4, #0]
 8001956:	f013 0f04 	tst.w	r3, #4
 800195a:	d006      	beq.n	800196a <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800195c:	4a16      	ldr	r2, [pc, #88]	; (80019b8 <HAL_RCC_ClockConfig+0x150>)
 800195e:	6893      	ldr	r3, [r2, #8]
 8001960:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001964:	68e1      	ldr	r1, [r4, #12]
 8001966:	430b      	orrs	r3, r1
 8001968:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196a:	6823      	ldr	r3, [r4, #0]
 800196c:	f013 0f08 	tst.w	r3, #8
 8001970:	d007      	beq.n	8001982 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001972:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <HAL_RCC_ClockConfig+0x150>)
 8001974:	6893      	ldr	r3, [r2, #8]
 8001976:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800197a:	6921      	ldr	r1, [r4, #16]
 800197c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001980:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001982:	f7ff ff1f 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <HAL_RCC_ClockConfig+0x150>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800198e:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <HAL_RCC_ClockConfig+0x154>)
 8001990:	5cd3      	ldrb	r3, [r2, r3]
 8001992:	40d8      	lsrs	r0, r3
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_RCC_ClockConfig+0x158>)
 8001996:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff f8af 	bl	8000afc <HAL_InitTick>
  return HAL_OK;
 800199e:	2000      	movs	r0, #0
}
 80019a0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80019a2:	2001      	movs	r0, #1
}
 80019a4:	4770      	bx	lr
      return HAL_ERROR;
 80019a6:	2001      	movs	r0, #1
 80019a8:	e7fa      	b.n	80019a0 <HAL_RCC_ClockConfig+0x138>
        return HAL_ERROR;
 80019aa:	2001      	movs	r0, #1
 80019ac:	e7f8      	b.n	80019a0 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 80019ae:	2001      	movs	r0, #1
 80019b0:	e7f6      	b.n	80019a0 <HAL_RCC_ClockConfig+0x138>
 80019b2:	bf00      	nop
 80019b4:	40023c00 	.word	0x40023c00
 80019b8:	40023800 	.word	0x40023800
 80019bc:	08004670 	.word	0x08004670
 80019c0:	20000018 	.word	0x20000018

080019c4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80019c4:	4b01      	ldr	r3, [pc, #4]	; (80019cc <HAL_RCC_GetHCLKFreq+0x8>)
 80019c6:	6818      	ldr	r0, [r3, #0]
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000018 	.word	0x20000018

080019d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019d0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019d2:	f7ff fff7 	bl	80019c4 <HAL_RCC_GetHCLKFreq>
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80019de:	4a03      	ldr	r2, [pc, #12]	; (80019ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 80019e0:	5cd3      	ldrb	r3, [r2, r3]
}
 80019e2:	40d8      	lsrs	r0, r3
 80019e4:	bd08      	pop	{r3, pc}
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800
 80019ec:	08004680 	.word	0x08004680

080019f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019f0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019f2:	f7ff ffe7 	bl	80019c4 <HAL_RCC_GetHCLKFreq>
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <HAL_RCC_GetPCLK2Freq+0x18>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80019fe:	4a03      	ldr	r2, [pc, #12]	; (8001a0c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a00:	5cd3      	ldrb	r3, [r2, r3]
}
 8001a02:	40d8      	lsrs	r0, r3
 8001a04:	bd08      	pop	{r3, pc}
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	08004680 	.word	0x08004680

08001a10 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a14:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001a16:	6801      	ldr	r1, [r0, #0]
 8001a18:	690a      	ldr	r2, [r1, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001a1a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001a1e:	68c3      	ldr	r3, [r0, #12]
 8001a20:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001a22:	610b      	str	r3, [r1, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001a24:	6801      	ldr	r1, [r0, #0]
 8001a26:	68ca      	ldr	r2, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001a28:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8001a2c:	f022 020c 	bic.w	r2, r2, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a30:	6883      	ldr	r3, [r0, #8]
 8001a32:	6900      	ldr	r0, [r0, #16]
 8001a34:	4303      	orrs	r3, r0
 8001a36:	6960      	ldr	r0, [r4, #20]
 8001a38:	4303      	orrs	r3, r0
 8001a3a:	69e0      	ldr	r0, [r4, #28]
 8001a3c:	4303      	orrs	r3, r0
 8001a3e:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001a40:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001a42:	6821      	ldr	r1, [r4, #0]
 8001a44:	694a      	ldr	r2, [r1, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001a46:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001a4a:	69a3      	ldr	r3, [r4, #24]
 8001a4c:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001a4e:	614b      	str	r3, [r1, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a50:	69e3      	ldr	r3, [r4, #28]
 8001a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a56:	d05e      	beq.n	8001b16 <UART_SetConfig+0x106>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	4ab5      	ldr	r2, [pc, #724]	; (8001d30 <UART_SetConfig+0x320>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	f000 8110 	beq.w	8001c82 <UART_SetConfig+0x272>
 8001a62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a66:	4293      	cmp	r3, r2
 8001a68:	f000 810b 	beq.w	8001c82 <UART_SetConfig+0x272>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001a6c:	f7ff ffb0 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 8001a70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a78:	6865      	ldr	r5, [r4, #4]
 8001a7a:	00ad      	lsls	r5, r5, #2
 8001a7c:	fbb0 f5f5 	udiv	r5, r0, r5
 8001a80:	4fac      	ldr	r7, [pc, #688]	; (8001d34 <UART_SetConfig+0x324>)
 8001a82:	fba7 3505 	umull	r3, r5, r7, r5
 8001a86:	096d      	lsrs	r5, r5, #5
 8001a88:	012e      	lsls	r6, r5, #4
 8001a8a:	f7ff ffa1 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 8001a8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a96:	6865      	ldr	r5, [r4, #4]
 8001a98:	00ad      	lsls	r5, r5, #2
 8001a9a:	fbb0 f5f5 	udiv	r5, r0, r5
 8001a9e:	f7ff ff97 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 8001aa2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001aa6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001aaa:	6863      	ldr	r3, [r4, #4]
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ab2:	fba7 2303 	umull	r2, r3, r7, r3
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001abc:	fb08 5313 	mls	r3, r8, r3, r5
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	3332      	adds	r3, #50	; 0x32
 8001ac4:	fba7 2303 	umull	r2, r3, r7, r3
 8001ac8:	095b      	lsrs	r3, r3, #5
 8001aca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ace:	18f5      	adds	r5, r6, r3
 8001ad0:	f7ff ff7e 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 8001ad4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ad8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001adc:	6866      	ldr	r6, [r4, #4]
 8001ade:	00b6      	lsls	r6, r6, #2
 8001ae0:	fbb0 f6f6 	udiv	r6, r0, r6
 8001ae4:	f7ff ff74 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 8001ae8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001aec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001af0:	6863      	ldr	r3, [r4, #4]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001af8:	fba7 3000 	umull	r3, r0, r7, r0
 8001afc:	0940      	lsrs	r0, r0, #5
 8001afe:	fb08 6010 	mls	r0, r8, r0, r6
 8001b02:	0100      	lsls	r0, r0, #4
 8001b04:	3032      	adds	r0, #50	; 0x32
 8001b06:	fba7 3700 	umull	r3, r7, r7, r0
 8001b0a:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	442f      	add	r7, r5
 8001b12:	609f      	str	r7, [r3, #8]
    }
  }
}
 8001b14:	e109      	b.n	8001d2a <UART_SetConfig+0x31a>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	4a85      	ldr	r2, [pc, #532]	; (8001d30 <UART_SetConfig+0x320>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d05a      	beq.n	8001bd4 <UART_SetConfig+0x1c4>
 8001b1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d056      	beq.n	8001bd4 <UART_SetConfig+0x1c4>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b26:	f7ff ff53 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 8001b2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b32:	6865      	ldr	r5, [r4, #4]
 8001b34:	006d      	lsls	r5, r5, #1
 8001b36:	fbb0 f5f5 	udiv	r5, r0, r5
 8001b3a:	4f7e      	ldr	r7, [pc, #504]	; (8001d34 <UART_SetConfig+0x324>)
 8001b3c:	fba7 3505 	umull	r3, r5, r7, r5
 8001b40:	096d      	lsrs	r5, r5, #5
 8001b42:	ea4f 1905 	mov.w	r9, r5, lsl #4
 8001b46:	f7ff ff43 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 8001b4a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b52:	6866      	ldr	r6, [r4, #4]
 8001b54:	0076      	lsls	r6, r6, #1
 8001b56:	fbb0 f6f6 	udiv	r6, r0, r6
 8001b5a:	f7ff ff39 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 8001b5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b66:	6865      	ldr	r5, [r4, #4]
 8001b68:	006d      	lsls	r5, r5, #1
 8001b6a:	fbb0 f5f5 	udiv	r5, r0, r5
 8001b6e:	fba7 3505 	umull	r3, r5, r7, r5
 8001b72:	096d      	lsrs	r5, r5, #5
 8001b74:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001b78:	fb08 6515 	mls	r5, r8, r5, r6
 8001b7c:	00ed      	lsls	r5, r5, #3
 8001b7e:	3532      	adds	r5, #50	; 0x32
 8001b80:	fba7 3505 	umull	r3, r5, r7, r5
 8001b84:	096d      	lsrs	r5, r5, #5
 8001b86:	006d      	lsls	r5, r5, #1
 8001b88:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001b8c:	444d      	add	r5, r9
 8001b8e:	f7ff ff1f 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 8001b92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b9a:	6866      	ldr	r6, [r4, #4]
 8001b9c:	0076      	lsls	r6, r6, #1
 8001b9e:	fbb0 f6f6 	udiv	r6, r0, r6
 8001ba2:	f7ff ff15 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 8001ba6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001baa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bae:	6863      	ldr	r3, [r4, #4]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb6:	fba7 2303 	umull	r2, r3, r7, r3
 8001bba:	095b      	lsrs	r3, r3, #5
 8001bbc:	fb08 6313 	mls	r3, r8, r3, r6
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	3332      	adds	r3, #50	; 0x32
 8001bc4:	fba7 3703 	umull	r3, r7, r7, r3
 8001bc8:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8001bcc:	6823      	ldr	r3, [r4, #0]
 8001bce:	442f      	add	r7, r5
 8001bd0:	609f      	str	r7, [r3, #8]
 8001bd2:	e0aa      	b.n	8001d2a <UART_SetConfig+0x31a>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001bd4:	f7ff ff0c 	bl	80019f0 <HAL_RCC_GetPCLK2Freq>
 8001bd8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bdc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001be0:	6865      	ldr	r5, [r4, #4]
 8001be2:	006d      	lsls	r5, r5, #1
 8001be4:	fbb0 f5f5 	udiv	r5, r0, r5
 8001be8:	4f52      	ldr	r7, [pc, #328]	; (8001d34 <UART_SetConfig+0x324>)
 8001bea:	fba7 3505 	umull	r3, r5, r7, r5
 8001bee:	096d      	lsrs	r5, r5, #5
 8001bf0:	ea4f 1905 	mov.w	r9, r5, lsl #4
 8001bf4:	f7ff fefc 	bl	80019f0 <HAL_RCC_GetPCLK2Freq>
 8001bf8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c00:	6866      	ldr	r6, [r4, #4]
 8001c02:	0076      	lsls	r6, r6, #1
 8001c04:	fbb0 f6f6 	udiv	r6, r0, r6
 8001c08:	f7ff fef2 	bl	80019f0 <HAL_RCC_GetPCLK2Freq>
 8001c0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c14:	6865      	ldr	r5, [r4, #4]
 8001c16:	006d      	lsls	r5, r5, #1
 8001c18:	fbb0 f5f5 	udiv	r5, r0, r5
 8001c1c:	fba7 3505 	umull	r3, r5, r7, r5
 8001c20:	096d      	lsrs	r5, r5, #5
 8001c22:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001c26:	fb08 6515 	mls	r5, r8, r5, r6
 8001c2a:	00ed      	lsls	r5, r5, #3
 8001c2c:	3532      	adds	r5, #50	; 0x32
 8001c2e:	fba7 3505 	umull	r3, r5, r7, r5
 8001c32:	096d      	lsrs	r5, r5, #5
 8001c34:	006d      	lsls	r5, r5, #1
 8001c36:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001c3a:	444d      	add	r5, r9
 8001c3c:	f7ff fed8 	bl	80019f0 <HAL_RCC_GetPCLK2Freq>
 8001c40:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c48:	6866      	ldr	r6, [r4, #4]
 8001c4a:	0076      	lsls	r6, r6, #1
 8001c4c:	fbb0 f6f6 	udiv	r6, r0, r6
 8001c50:	f7ff fece 	bl	80019f0 <HAL_RCC_GetPCLK2Freq>
 8001c54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c5c:	6863      	ldr	r3, [r4, #4]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c64:	fba7 2303 	umull	r2, r3, r7, r3
 8001c68:	095b      	lsrs	r3, r3, #5
 8001c6a:	fb08 6313 	mls	r3, r8, r3, r6
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	3332      	adds	r3, #50	; 0x32
 8001c72:	fba7 3703 	umull	r3, r7, r7, r3
 8001c76:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	442f      	add	r7, r5
 8001c7e:	609f      	str	r7, [r3, #8]
 8001c80:	e053      	b.n	8001d2a <UART_SetConfig+0x31a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001c82:	f7ff feb5 	bl	80019f0 <HAL_RCC_GetPCLK2Freq>
 8001c86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c8e:	6865      	ldr	r5, [r4, #4]
 8001c90:	00ad      	lsls	r5, r5, #2
 8001c92:	fbb0 f5f5 	udiv	r5, r0, r5
 8001c96:	4f27      	ldr	r7, [pc, #156]	; (8001d34 <UART_SetConfig+0x324>)
 8001c98:	fba7 3505 	umull	r3, r5, r7, r5
 8001c9c:	096d      	lsrs	r5, r5, #5
 8001c9e:	012e      	lsls	r6, r5, #4
 8001ca0:	f7ff fea6 	bl	80019f0 <HAL_RCC_GetPCLK2Freq>
 8001ca4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ca8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cac:	6865      	ldr	r5, [r4, #4]
 8001cae:	00ad      	lsls	r5, r5, #2
 8001cb0:	fbb0 f5f5 	udiv	r5, r0, r5
 8001cb4:	f7ff fe9c 	bl	80019f0 <HAL_RCC_GetPCLK2Freq>
 8001cb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cbc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cc0:	6863      	ldr	r3, [r4, #4]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc8:	fba7 2303 	umull	r2, r3, r7, r3
 8001ccc:	095b      	lsrs	r3, r3, #5
 8001cce:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001cd2:	fb08 5313 	mls	r3, r8, r3, r5
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	3332      	adds	r3, #50	; 0x32
 8001cda:	fba7 2303 	umull	r2, r3, r7, r3
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ce4:	18f5      	adds	r5, r6, r3
 8001ce6:	f7ff fe83 	bl	80019f0 <HAL_RCC_GetPCLK2Freq>
 8001cea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cf2:	6866      	ldr	r6, [r4, #4]
 8001cf4:	00b6      	lsls	r6, r6, #2
 8001cf6:	fbb0 f6f6 	udiv	r6, r0, r6
 8001cfa:	f7ff fe79 	bl	80019f0 <HAL_RCC_GetPCLK2Freq>
 8001cfe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d06:	6863      	ldr	r3, [r4, #4]
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d0e:	fba7 3000 	umull	r3, r0, r7, r0
 8001d12:	0940      	lsrs	r0, r0, #5
 8001d14:	fb08 6010 	mls	r0, r8, r0, r6
 8001d18:	0100      	lsls	r0, r0, #4
 8001d1a:	3032      	adds	r0, #50	; 0x32
 8001d1c:	fba7 3700 	umull	r3, r7, r7, r0
 8001d20:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	442f      	add	r7, r5
 8001d28:	609f      	str	r7, [r3, #8]
}
 8001d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d2e:	bf00      	nop
 8001d30:	40011000 	.word	0x40011000
 8001d34:	51eb851f 	.word	0x51eb851f

08001d38 <HAL_UART_Init>:
  if(huart == NULL)
 8001d38:	b358      	cbz	r0, 8001d92 <HAL_UART_Init+0x5a>
{
 8001d3a:	b510      	push	{r4, lr}
 8001d3c:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8001d3e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d42:	b30b      	cbz	r3, 8001d88 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001d44:	2324      	movs	r3, #36	; 0x24
 8001d46:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001d4a:	6822      	ldr	r2, [r4, #0]
 8001d4c:	68d3      	ldr	r3, [r2, #12]
 8001d4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d52:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001d54:	4620      	mov	r0, r4
 8001d56:	f7ff fe5b 	bl	8001a10 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d5a:	6822      	ldr	r2, [r4, #0]
 8001d5c:	6913      	ldr	r3, [r2, #16]
 8001d5e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001d62:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d64:	6822      	ldr	r2, [r4, #0]
 8001d66:	6953      	ldr	r3, [r2, #20]
 8001d68:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001d6c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001d6e:	6822      	ldr	r2, [r4, #0]
 8001d70:	68d3      	ldr	r3, [r2, #12]
 8001d72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d76:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d78:	2000      	movs	r0, #0
 8001d7a:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001d7c:	2320      	movs	r3, #32
 8001d7e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001d82:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001d86:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001d88:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001d8c:	f7fe fe7a 	bl	8000a84 <HAL_UART_MspInit>
 8001d90:	e7d8      	b.n	8001d44 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001d92:	2001      	movs	r0, #1
}
 8001d94:	4770      	bx	lr
	...

08001d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d9e:	e003      	b.n	8001da8 <LoopCopyDataInit>

08001da0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001da2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001da4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001da6:	3104      	adds	r1, #4

08001da8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001da8:	480b      	ldr	r0, [pc, #44]	; (8001dd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001dac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001dae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001db0:	d3f6      	bcc.n	8001da0 <CopyDataInit>
  ldr  r2, =_sbss
 8001db2:	4a0b      	ldr	r2, [pc, #44]	; (8001de0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001db4:	e002      	b.n	8001dbc <LoopFillZerobss>

08001db6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001db6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001db8:	f842 3b04 	str.w	r3, [r2], #4

08001dbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001dbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001dc0:	d3f9      	bcc.n	8001db6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dc2:	f7fe fe1f 	bl	8000a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dc6:	f000 f811 	bl	8001dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dca:	f7fe fc5d 	bl	8000688 <main>
  bx  lr    
 8001dce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001dd0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001dd4:	080046b0 	.word	0x080046b0
  ldr  r0, =_sdata
 8001dd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ddc:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8001de0:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 8001de4:	200004e0 	.word	0x200004e0

08001de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de8:	e7fe      	b.n	8001de8 <ADC_IRQHandler>
	...

08001dec <__libc_init_array>:
 8001dec:	b570      	push	{r4, r5, r6, lr}
 8001dee:	4d0d      	ldr	r5, [pc, #52]	; (8001e24 <__libc_init_array+0x38>)
 8001df0:	4c0d      	ldr	r4, [pc, #52]	; (8001e28 <__libc_init_array+0x3c>)
 8001df2:	1b64      	subs	r4, r4, r5
 8001df4:	10a4      	asrs	r4, r4, #2
 8001df6:	2600      	movs	r6, #0
 8001df8:	42a6      	cmp	r6, r4
 8001dfa:	d109      	bne.n	8001e10 <__libc_init_array+0x24>
 8001dfc:	4d0b      	ldr	r5, [pc, #44]	; (8001e2c <__libc_init_array+0x40>)
 8001dfe:	4c0c      	ldr	r4, [pc, #48]	; (8001e30 <__libc_init_array+0x44>)
 8001e00:	f000 f820 	bl	8001e44 <_init>
 8001e04:	1b64      	subs	r4, r4, r5
 8001e06:	10a4      	asrs	r4, r4, #2
 8001e08:	2600      	movs	r6, #0
 8001e0a:	42a6      	cmp	r6, r4
 8001e0c:	d105      	bne.n	8001e1a <__libc_init_array+0x2e>
 8001e0e:	bd70      	pop	{r4, r5, r6, pc}
 8001e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e14:	4798      	blx	r3
 8001e16:	3601      	adds	r6, #1
 8001e18:	e7ee      	b.n	8001df8 <__libc_init_array+0xc>
 8001e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e1e:	4798      	blx	r3
 8001e20:	3601      	adds	r6, #1
 8001e22:	e7f2      	b.n	8001e0a <__libc_init_array+0x1e>
 8001e24:	080046a8 	.word	0x080046a8
 8001e28:	080046a8 	.word	0x080046a8
 8001e2c:	080046a8 	.word	0x080046a8
 8001e30:	080046ac 	.word	0x080046ac

08001e34 <memset>:
 8001e34:	4402      	add	r2, r0
 8001e36:	4603      	mov	r3, r0
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d100      	bne.n	8001e3e <memset+0xa>
 8001e3c:	4770      	bx	lr
 8001e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8001e42:	e7f9      	b.n	8001e38 <memset+0x4>

08001e44 <_init>:
 8001e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e46:	bf00      	nop
 8001e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e4a:	bc08      	pop	{r3}
 8001e4c:	469e      	mov	lr, r3
 8001e4e:	4770      	bx	lr

08001e50 <_fini>:
 8001e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e52:	bf00      	nop
 8001e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e56:	bc08      	pop	{r3}
 8001e58:	469e      	mov	lr, r3
 8001e5a:	4770      	bx	lr
